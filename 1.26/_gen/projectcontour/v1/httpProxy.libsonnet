{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='httpProxy', url='', help='"HTTPProxy is an Ingress CRD specification."'),
  '#metadata':: d.obj(help='"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create."'),
  metadata: {
    '#withAnnotations':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotations(annotations): { metadata+: { annotations: annotations } },
    '#withAnnotationsMixin':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotationsMixin(annotations): { metadata+: { annotations+: annotations } },
    '#withClusterName':: d.fn(help='"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."', args=[d.arg(name='clusterName', type=d.T.string)]),
    withClusterName(clusterName): { metadata+: { clusterName: clusterName } },
    '#withCreationTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='creationTimestamp', type=d.T.string)]),
    withCreationTimestamp(creationTimestamp): { metadata+: { creationTimestamp: creationTimestamp } },
    '#withDeletionGracePeriodSeconds':: d.fn(help='"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only."', args=[d.arg(name='deletionGracePeriodSeconds', type=d.T.integer)]),
    withDeletionGracePeriodSeconds(deletionGracePeriodSeconds): { metadata+: { deletionGracePeriodSeconds: deletionGracePeriodSeconds } },
    '#withDeletionTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='deletionTimestamp', type=d.T.string)]),
    withDeletionTimestamp(deletionTimestamp): { metadata+: { deletionTimestamp: deletionTimestamp } },
    '#withFinalizers':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizers(finalizers): { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withFinalizersMixin':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizersMixin(finalizers): { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withGenerateName':: d.fn(help='"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"', args=[d.arg(name='generateName', type=d.T.string)]),
    withGenerateName(generateName): { metadata+: { generateName: generateName } },
    '#withGeneration':: d.fn(help='"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only."', args=[d.arg(name='generation', type=d.T.integer)]),
    withGeneration(generation): { metadata+: { generation: generation } },
    '#withLabels':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"', args=[d.arg(name='labels', type=d.T.object)]),
    withLabels(labels): { metadata+: { labels: labels } },
    '#withLabelsMixin':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
    withLabelsMixin(labels): { metadata+: { labels+: labels } },
    '#withName':: d.fn(help='"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"', args=[d.arg(name='name', type=d.T.string)]),
    withName(name): { metadata+: { name: name } },
    '#withNamespace':: d.fn(help='"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\"default\\" namespace, but \\"default\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"', args=[d.arg(name='namespace', type=d.T.string)]),
    withNamespace(namespace): { metadata+: { namespace: namespace } },
    '#withOwnerReferences':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferences(ownerReferences): { metadata+: { ownerReferences: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withOwnerReferencesMixin':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferencesMixin(ownerReferences): { metadata+: { ownerReferences+: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withResourceVersion':: d.fn(help='"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
    withResourceVersion(resourceVersion): { metadata+: { resourceVersion: resourceVersion } },
    '#withSelfLink':: d.fn(help='"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release."', args=[d.arg(name='selfLink', type=d.T.string)]),
    withSelfLink(selfLink): { metadata+: { selfLink: selfLink } },
    '#withUid':: d.fn(help='"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"', args=[d.arg(name='uid', type=d.T.string)]),
    withUid(uid): { metadata+: { uid: uid } },
  },
  '#new':: d.fn(help='new returns an instance of HTTPProxy', args=[d.arg(name='name', type=d.T.string)]),
  new(name): {
    apiVersion: 'projectcontour.io/v1',
    kind: 'HTTPProxy',
  } + self.metadata.withName(name=name),
  '#spec':: d.obj(help='"HTTPProxySpec defines the spec of the CRD."'),
  spec: {
    '#includes':: d.obj(help='"Includes allow for specific routing configuration to be included from another HTTPProxy, possibly in another namespace."'),
    includes: {
      '#conditions':: d.obj(help='"Conditions are a set of rules that are applied to included HTTPProxies. In effect, they are added onto the Conditions of included HTTPProxy Route structs. When applied, they are merged using AND, with one exception: There can be only one Prefix MatchCondition per Conditions slice. More than one Prefix, or contradictory Conditions, will make the include invalid. Exact and Regex match conditions are not allowed on includes."'),
      conditions: {
        '#header':: d.obj(help='"Header specifies the header condition to match."'),
        header: {
          '#withContains':: d.fn(help='"Contains specifies a substring that must be present in the header value."', args=[d.arg(name='contains', type=d.T.string)]),
          withContains(contains): { header+: { contains: contains } },
          '#withExact':: d.fn(help='"Exact specifies a string that the header value must be equal to."', args=[d.arg(name='exact', type=d.T.string)]),
          withExact(exact): { header+: { exact: exact } },
          '#withIgnoreCase':: d.fn(help='"IgnoreCase specifies that string matching should be case insensitive. Note that this has no effect on the Regex parameter."', args=[d.arg(name='ignoreCase', type=d.T.boolean)]),
          withIgnoreCase(ignoreCase): { header+: { ignoreCase: ignoreCase } },
          '#withName':: d.fn(help='"Name is the name of the header to match against. Name is required. Header names are case insensitive."', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { header+: { name: name } },
          '#withNotcontains':: d.fn(help='"NotContains specifies a substring that must not be present in the header value."', args=[d.arg(name='notcontains', type=d.T.string)]),
          withNotcontains(notcontains): { header+: { notcontains: notcontains } },
          '#withNotexact':: d.fn(help='"NoExact specifies a string that the header value must not be equal to. The condition is true if the header has any other value."', args=[d.arg(name='notexact', type=d.T.string)]),
          withNotexact(notexact): { header+: { notexact: notexact } },
          '#withNotpresent':: d.fn(help='"NotPresent specifies that condition is true when the named header is not present. Note that setting NotPresent to false does not make the condition true if the named header is present."', args=[d.arg(name='notpresent', type=d.T.boolean)]),
          withNotpresent(notpresent): { header+: { notpresent: notpresent } },
          '#withPresent':: d.fn(help='"Present specifies that condition is true when the named header is present, regardless of its value. Note that setting Present to false does not make the condition true if the named header is absent."', args=[d.arg(name='present', type=d.T.boolean)]),
          withPresent(present): { header+: { present: present } },
          '#withRegex':: d.fn(help='"Regex specifies a regular expression pattern that must match the header value."', args=[d.arg(name='regex', type=d.T.string)]),
          withRegex(regex): { header+: { regex: regex } },
          '#withTreatMissingAsEmpty':: d.fn(help='"TreatMissingAsEmpty specifies if the header match rule specified header does not exist, this header value will be treated as empty. Defaults to false. Unlike the underlying Envoy implementation this is **only** supported for negative matches (e.g. NotContains, NotExact)."', args=[d.arg(name='treatMissingAsEmpty', type=d.T.boolean)]),
          withTreatMissingAsEmpty(treatMissingAsEmpty): { header+: { treatMissingAsEmpty: treatMissingAsEmpty } },
        },
        '#queryParameter':: d.obj(help='"QueryParameter specifies the query parameter condition to match."'),
        queryParameter: {
          '#withContains':: d.fn(help='"Contains specifies a substring that must be present in the query parameter value."', args=[d.arg(name='contains', type=d.T.string)]),
          withContains(contains): { queryParameter+: { contains: contains } },
          '#withExact':: d.fn(help='"Exact specifies a string that the query parameter value must be equal to."', args=[d.arg(name='exact', type=d.T.string)]),
          withExact(exact): { queryParameter+: { exact: exact } },
          '#withIgnoreCase':: d.fn(help='"IgnoreCase specifies that string matching should be case insensitive. Note that this has no effect on the Regex parameter."', args=[d.arg(name='ignoreCase', type=d.T.boolean)]),
          withIgnoreCase(ignoreCase): { queryParameter+: { ignoreCase: ignoreCase } },
          '#withName':: d.fn(help='"Name is the name of the query parameter to match against. Name is required. Query parameter names are case insensitive."', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { queryParameter+: { name: name } },
          '#withPrefix':: d.fn(help='"Prefix defines a prefix match for the query parameter value."', args=[d.arg(name='prefix', type=d.T.string)]),
          withPrefix(prefix): { queryParameter+: { prefix: prefix } },
          '#withPresent':: d.fn(help='"Present specifies that condition is true when the named query parameter is present, regardless of its value. Note that setting Present to false does not make the condition true if the named query parameter is absent."', args=[d.arg(name='present', type=d.T.boolean)]),
          withPresent(present): { queryParameter+: { present: present } },
          '#withRegex':: d.fn(help='"Regex specifies a regular expression pattern that must match the query parameter value."', args=[d.arg(name='regex', type=d.T.string)]),
          withRegex(regex): { queryParameter+: { regex: regex } },
          '#withSuffix':: d.fn(help='"Suffix defines a suffix match for a query parameter value."', args=[d.arg(name='suffix', type=d.T.string)]),
          withSuffix(suffix): { queryParameter+: { suffix: suffix } },
        },
        '#withExact':: d.fn(help='"Exact defines a exact match for a request. This field is not allowed in include match conditions."', args=[d.arg(name='exact', type=d.T.string)]),
        withExact(exact): { exact: exact },
        '#withPrefix':: d.fn(help='"Prefix defines a prefix match for a request."', args=[d.arg(name='prefix', type=d.T.string)]),
        withPrefix(prefix): { prefix: prefix },
        '#withRegex':: d.fn(help='"Regex defines a regex match for a request. This field is not allowed in include match conditions."', args=[d.arg(name='regex', type=d.T.string)]),
        withRegex(regex): { regex: regex },
      },
      '#withConditions':: d.fn(help='"Conditions are a set of rules that are applied to included HTTPProxies. In effect, they are added onto the Conditions of included HTTPProxy Route structs. When applied, they are merged using AND, with one exception: There can be only one Prefix MatchCondition per Conditions slice. More than one Prefix, or contradictory Conditions, will make the include invalid. Exact and Regex match conditions are not allowed on includes."', args=[d.arg(name='conditions', type=d.T.array)]),
      withConditions(conditions): { conditions: if std.isArray(v=conditions) then conditions else [conditions] },
      '#withConditionsMixin':: d.fn(help='"Conditions are a set of rules that are applied to included HTTPProxies. In effect, they are added onto the Conditions of included HTTPProxy Route structs. When applied, they are merged using AND, with one exception: There can be only one Prefix MatchCondition per Conditions slice. More than one Prefix, or contradictory Conditions, will make the include invalid. Exact and Regex match conditions are not allowed on includes."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='conditions', type=d.T.array)]),
      withConditionsMixin(conditions): { conditions+: if std.isArray(v=conditions) then conditions else [conditions] },
      '#withName':: d.fn(help='"Name of the HTTPProxy"', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { name: name },
      '#withNamespace':: d.fn(help='"Namespace of the HTTPProxy to include. Defaults to the current namespace if not supplied."', args=[d.arg(name='namespace', type=d.T.string)]),
      withNamespace(namespace): { namespace: namespace },
    },
    '#routes':: d.obj(help='"Routes are the ingress routes. If TCPProxy is present, Routes is ignored."'),
    routes: {
      '#authPolicy':: d.obj(help='"AuthPolicy updates the authorization policy that was set on the root HTTPProxy object for client requests that match this route."'),
      authPolicy: {
        '#withContext':: d.fn(help='"Context is a set of key/value pairs that are sent to the authentication server in the check request. If a context is provided at an enclosing scope, the entries are merged such that the inner scope overrides matching keys from the outer scope."', args=[d.arg(name='context', type=d.T.object)]),
        withContext(context): { authPolicy+: { context: context } },
        '#withContextMixin':: d.fn(help='"Context is a set of key/value pairs that are sent to the authentication server in the check request. If a context is provided at an enclosing scope, the entries are merged such that the inner scope overrides matching keys from the outer scope."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='context', type=d.T.object)]),
        withContextMixin(context): { authPolicy+: { context+: context } },
        '#withDisabled':: d.fn(help='"When true, this field disables client request authentication for the scope of the policy."', args=[d.arg(name='disabled', type=d.T.boolean)]),
        withDisabled(disabled): { authPolicy+: { disabled: disabled } },
      },
      '#conditions':: d.obj(help='"Conditions are a set of rules that are applied to a Route. When applied, they are merged using AND, with one exception: There can be only one Prefix, Exact or Regex MatchCondition per Conditions slice. More than one of these condition types, or contradictory Conditions, will make the route invalid."'),
      conditions: {
        '#header':: d.obj(help='"Header specifies the header condition to match."'),
        header: {
          '#withContains':: d.fn(help='"Contains specifies a substring that must be present in the header value."', args=[d.arg(name='contains', type=d.T.string)]),
          withContains(contains): { header+: { contains: contains } },
          '#withExact':: d.fn(help='"Exact specifies a string that the header value must be equal to."', args=[d.arg(name='exact', type=d.T.string)]),
          withExact(exact): { header+: { exact: exact } },
          '#withIgnoreCase':: d.fn(help='"IgnoreCase specifies that string matching should be case insensitive. Note that this has no effect on the Regex parameter."', args=[d.arg(name='ignoreCase', type=d.T.boolean)]),
          withIgnoreCase(ignoreCase): { header+: { ignoreCase: ignoreCase } },
          '#withName':: d.fn(help='"Name is the name of the header to match against. Name is required. Header names are case insensitive."', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { header+: { name: name } },
          '#withNotcontains':: d.fn(help='"NotContains specifies a substring that must not be present in the header value."', args=[d.arg(name='notcontains', type=d.T.string)]),
          withNotcontains(notcontains): { header+: { notcontains: notcontains } },
          '#withNotexact':: d.fn(help='"NoExact specifies a string that the header value must not be equal to. The condition is true if the header has any other value."', args=[d.arg(name='notexact', type=d.T.string)]),
          withNotexact(notexact): { header+: { notexact: notexact } },
          '#withNotpresent':: d.fn(help='"NotPresent specifies that condition is true when the named header is not present. Note that setting NotPresent to false does not make the condition true if the named header is present."', args=[d.arg(name='notpresent', type=d.T.boolean)]),
          withNotpresent(notpresent): { header+: { notpresent: notpresent } },
          '#withPresent':: d.fn(help='"Present specifies that condition is true when the named header is present, regardless of its value. Note that setting Present to false does not make the condition true if the named header is absent."', args=[d.arg(name='present', type=d.T.boolean)]),
          withPresent(present): { header+: { present: present } },
          '#withRegex':: d.fn(help='"Regex specifies a regular expression pattern that must match the header value."', args=[d.arg(name='regex', type=d.T.string)]),
          withRegex(regex): { header+: { regex: regex } },
          '#withTreatMissingAsEmpty':: d.fn(help='"TreatMissingAsEmpty specifies if the header match rule specified header does not exist, this header value will be treated as empty. Defaults to false. Unlike the underlying Envoy implementation this is **only** supported for negative matches (e.g. NotContains, NotExact)."', args=[d.arg(name='treatMissingAsEmpty', type=d.T.boolean)]),
          withTreatMissingAsEmpty(treatMissingAsEmpty): { header+: { treatMissingAsEmpty: treatMissingAsEmpty } },
        },
        '#queryParameter':: d.obj(help='"QueryParameter specifies the query parameter condition to match."'),
        queryParameter: {
          '#withContains':: d.fn(help='"Contains specifies a substring that must be present in the query parameter value."', args=[d.arg(name='contains', type=d.T.string)]),
          withContains(contains): { queryParameter+: { contains: contains } },
          '#withExact':: d.fn(help='"Exact specifies a string that the query parameter value must be equal to."', args=[d.arg(name='exact', type=d.T.string)]),
          withExact(exact): { queryParameter+: { exact: exact } },
          '#withIgnoreCase':: d.fn(help='"IgnoreCase specifies that string matching should be case insensitive. Note that this has no effect on the Regex parameter."', args=[d.arg(name='ignoreCase', type=d.T.boolean)]),
          withIgnoreCase(ignoreCase): { queryParameter+: { ignoreCase: ignoreCase } },
          '#withName':: d.fn(help='"Name is the name of the query parameter to match against. Name is required. Query parameter names are case insensitive."', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { queryParameter+: { name: name } },
          '#withPrefix':: d.fn(help='"Prefix defines a prefix match for the query parameter value."', args=[d.arg(name='prefix', type=d.T.string)]),
          withPrefix(prefix): { queryParameter+: { prefix: prefix } },
          '#withPresent':: d.fn(help='"Present specifies that condition is true when the named query parameter is present, regardless of its value. Note that setting Present to false does not make the condition true if the named query parameter is absent."', args=[d.arg(name='present', type=d.T.boolean)]),
          withPresent(present): { queryParameter+: { present: present } },
          '#withRegex':: d.fn(help='"Regex specifies a regular expression pattern that must match the query parameter value."', args=[d.arg(name='regex', type=d.T.string)]),
          withRegex(regex): { queryParameter+: { regex: regex } },
          '#withSuffix':: d.fn(help='"Suffix defines a suffix match for a query parameter value."', args=[d.arg(name='suffix', type=d.T.string)]),
          withSuffix(suffix): { queryParameter+: { suffix: suffix } },
        },
        '#withExact':: d.fn(help='"Exact defines a exact match for a request. This field is not allowed in include match conditions."', args=[d.arg(name='exact', type=d.T.string)]),
        withExact(exact): { exact: exact },
        '#withPrefix':: d.fn(help='"Prefix defines a prefix match for a request."', args=[d.arg(name='prefix', type=d.T.string)]),
        withPrefix(prefix): { prefix: prefix },
        '#withRegex':: d.fn(help='"Regex defines a regex match for a request. This field is not allowed in include match conditions."', args=[d.arg(name='regex', type=d.T.string)]),
        withRegex(regex): { regex: regex },
      },
      '#cookieRewritePolicies':: d.obj(help='"The policies for rewriting Set-Cookie header attributes. Note that rewritten cookie names must be unique in this list. Order rewrite policies are specified in does not matter."'),
      cookieRewritePolicies: {
        '#domainRewrite':: d.obj(help='"DomainRewrite enables rewriting the Set-Cookie Domain element. If not set, Domain will not be rewritten."'),
        domainRewrite: {
          '#withValue':: d.fn(help='"Value is the value to rewrite the Domain attribute to. For now this is required."', args=[d.arg(name='value', type=d.T.string)]),
          withValue(value): { domainRewrite+: { value: value } },
        },
        '#pathRewrite':: d.obj(help='"PathRewrite enables rewriting the Set-Cookie Path element. If not set, Path will not be rewritten."'),
        pathRewrite: {
          '#withValue':: d.fn(help='"Value is the value to rewrite the Path attribute to. For now this is required."', args=[d.arg(name='value', type=d.T.string)]),
          withValue(value): { pathRewrite+: { value: value } },
        },
        '#withName':: d.fn(help='"Name is the name of the cookie for which attributes will be rewritten."', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
        '#withSameSite':: d.fn(help='"SameSite enables rewriting the Set-Cookie SameSite element. If not set, SameSite attribute will not be rewritten."', args=[d.arg(name='sameSite', type=d.T.string)]),
        withSameSite(sameSite): { sameSite: sameSite },
        '#withSecure':: d.fn(help='"Secure enables rewriting the Set-Cookie Secure element. If not set, Secure attribute will not be rewritten."', args=[d.arg(name='secure', type=d.T.boolean)]),
        withSecure(secure): { secure: secure },
      },
      '#directResponsePolicy':: d.obj(help='"DirectResponsePolicy returns an arbitrary HTTP response directly."'),
      directResponsePolicy: {
        '#withBody':: d.fn(help='"Body is the content of the response body. If this setting is omitted, no body is included in the generated response. \\n Note: Body is not recommended to set too long otherwise it can have significant resource usage impacts."', args=[d.arg(name='body', type=d.T.string)]),
        withBody(body): { directResponsePolicy+: { body: body } },
        '#withStatusCode':: d.fn(help='"StatusCode is the HTTP response status to be returned."', args=[d.arg(name='statusCode', type=d.T.integer)]),
        withStatusCode(statusCode): { directResponsePolicy+: { statusCode: statusCode } },
      },
      '#healthCheckPolicy':: d.obj(help='"The health check policy for this route."'),
      healthCheckPolicy: {
        '#expectedStatuses':: d.obj(help='"The ranges of HTTP response statuses considered healthy. Follow half-open semantics, i.e. for each range the start is inclusive and the end is exclusive. Must be within the range [100,600). If not specified, only a 200 response status is considered healthy."'),
        expectedStatuses: {
          '#withEnd':: d.fn(help='"The end (exclusive) of a range of HTTP status codes."', args=[d.arg(name='end', type=d.T.integer)]),
          withEnd(end): { end: end },
          '#withStart':: d.fn(help='"The start (inclusive) of a range of HTTP status codes."', args=[d.arg(name='start', type=d.T.integer)]),
          withStart(start): { start: start },
        },
        '#withExpectedStatuses':: d.fn(help='"The ranges of HTTP response statuses considered healthy. Follow half-open semantics, i.e. for each range the start is inclusive and the end is exclusive. Must be within the range [100,600). If not specified, only a 200 response status is considered healthy."', args=[d.arg(name='expectedStatuses', type=d.T.array)]),
        withExpectedStatuses(expectedStatuses): { healthCheckPolicy+: { expectedStatuses: if std.isArray(v=expectedStatuses) then expectedStatuses else [expectedStatuses] } },
        '#withExpectedStatusesMixin':: d.fn(help='"The ranges of HTTP response statuses considered healthy. Follow half-open semantics, i.e. for each range the start is inclusive and the end is exclusive. Must be within the range [100,600). If not specified, only a 200 response status is considered healthy."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='expectedStatuses', type=d.T.array)]),
        withExpectedStatusesMixin(expectedStatuses): { healthCheckPolicy+: { expectedStatuses+: if std.isArray(v=expectedStatuses) then expectedStatuses else [expectedStatuses] } },
        '#withHealthyThresholdCount':: d.fn(help='"The number of healthy health checks required before a host is marked healthy"', args=[d.arg(name='healthyThresholdCount', type=d.T.integer)]),
        withHealthyThresholdCount(healthyThresholdCount): { healthCheckPolicy+: { healthyThresholdCount: healthyThresholdCount } },
        '#withHost':: d.fn(help='"The value of the host header in the HTTP health check request. If left empty (default value), the name \\"contour-envoy-healthcheck\\" will be used."', args=[d.arg(name='host', type=d.T.string)]),
        withHost(host): { healthCheckPolicy+: { host: host } },
        '#withIntervalSeconds':: d.fn(help='"The interval (seconds) between health checks"', args=[d.arg(name='intervalSeconds', type=d.T.integer)]),
        withIntervalSeconds(intervalSeconds): { healthCheckPolicy+: { intervalSeconds: intervalSeconds } },
        '#withPath':: d.fn(help='"HTTP endpoint used to perform health checks on upstream service"', args=[d.arg(name='path', type=d.T.string)]),
        withPath(path): { healthCheckPolicy+: { path: path } },
        '#withTimeoutSeconds':: d.fn(help='"The time to wait (seconds) for a health check response"', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
        withTimeoutSeconds(timeoutSeconds): { healthCheckPolicy+: { timeoutSeconds: timeoutSeconds } },
        '#withUnhealthyThresholdCount':: d.fn(help='"The number of unhealthy health checks required before a host is marked unhealthy"', args=[d.arg(name='unhealthyThresholdCount', type=d.T.integer)]),
        withUnhealthyThresholdCount(unhealthyThresholdCount): { healthCheckPolicy+: { unhealthyThresholdCount: unhealthyThresholdCount } },
      },
      '#internalRedirectPolicy':: d.obj(help='"The policy to define when to handle redirects responses internally."'),
      internalRedirectPolicy: {
        '#withAllowCrossSchemeRedirect':: d.fn(help='"AllowCrossSchemeRedirect Allow internal redirect to follow a target URI with a different scheme than the value of x-forwarded-proto. SafeOnly allows same scheme redirect and safe cross scheme redirect, which means if the downstream scheme is HTTPS, both HTTPS and HTTP redirect targets are allowed, but if the downstream scheme is HTTP, only HTTP redirect targets are allowed."', args=[d.arg(name='allowCrossSchemeRedirect', type=d.T.string)]),
        withAllowCrossSchemeRedirect(allowCrossSchemeRedirect): { internalRedirectPolicy+: { allowCrossSchemeRedirect: allowCrossSchemeRedirect } },
        '#withDenyRepeatedRouteRedirect':: d.fn(help='"If DenyRepeatedRouteRedirect is true, rejects redirect targets that are pointing to a route that has been followed by a previous redirect from the current route."', args=[d.arg(name='denyRepeatedRouteRedirect', type=d.T.boolean)]),
        withDenyRepeatedRouteRedirect(denyRepeatedRouteRedirect): { internalRedirectPolicy+: { denyRepeatedRouteRedirect: denyRepeatedRouteRedirect } },
        '#withMaxInternalRedirects':: d.fn(help='"MaxInternalRedirects An internal redirect is not handled, unless the number of previous internal redirects that a downstream request has encountered is lower than this value."', args=[d.arg(name='maxInternalRedirects', type=d.T.integer)]),
        withMaxInternalRedirects(maxInternalRedirects): { internalRedirectPolicy+: { maxInternalRedirects: maxInternalRedirects } },
        '#withRedirectResponseCodes':: d.fn(help='"RedirectResponseCodes If unspecified, only 302 will be treated as internal redirect. Only 301, 302, 303, 307 and 308 are valid values."', args=[d.arg(name='redirectResponseCodes', type=d.T.array)]),
        withRedirectResponseCodes(redirectResponseCodes): { internalRedirectPolicy+: { redirectResponseCodes: if std.isArray(v=redirectResponseCodes) then redirectResponseCodes else [redirectResponseCodes] } },
        '#withRedirectResponseCodesMixin':: d.fn(help='"RedirectResponseCodes If unspecified, only 302 will be treated as internal redirect. Only 301, 302, 303, 307 and 308 are valid values."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='redirectResponseCodes', type=d.T.array)]),
        withRedirectResponseCodesMixin(redirectResponseCodes): { internalRedirectPolicy+: { redirectResponseCodes+: if std.isArray(v=redirectResponseCodes) then redirectResponseCodes else [redirectResponseCodes] } },
      },
      '#ipAllowPolicy':: d.obj(help='"IPAllowFilterPolicy is a list of ipv4/6 filter rules for which matching requests should be allowed. All other requests will be denied. Only one of IPAllowFilterPolicy and IPDenyFilterPolicy can be defined. The rules defined here override any rules set on the root HTTPProxy."'),
      ipAllowPolicy: {
        '#withCidr':: d.fn(help='"CIDR is a CIDR block of ipv4 or ipv6 addresses to filter on. This can also be a bare IP address (without a mask) to filter on exactly one address."', args=[d.arg(name='cidr', type=d.T.string)]),
        withCidr(cidr): { cidr: cidr },
        '#withSource':: d.fn(help='"Source indicates how to determine the ip address to filter on, and can be one of two values: - `Remote` filters on the ip address of the client, accounting for PROXY and X-Forwarded-For as needed. - `Peer` filters on the ip of the network request, ignoring PROXY and X-Forwarded-For."', args=[d.arg(name='source', type=d.T.string)]),
        withSource(source): { source: source },
      },
      '#ipDenyPolicy':: d.obj(help='"IPDenyFilterPolicy is a list of ipv4/6 filter rules for which matching requests should be denied. All other requests will be allowed. Only one of IPAllowFilterPolicy and IPDenyFilterPolicy can be defined. The rules defined here override any rules set on the root HTTPProxy."'),
      ipDenyPolicy: {
        '#withCidr':: d.fn(help='"CIDR is a CIDR block of ipv4 or ipv6 addresses to filter on. This can also be a bare IP address (without a mask) to filter on exactly one address."', args=[d.arg(name='cidr', type=d.T.string)]),
        withCidr(cidr): { cidr: cidr },
        '#withSource':: d.fn(help='"Source indicates how to determine the ip address to filter on, and can be one of two values: - `Remote` filters on the ip address of the client, accounting for PROXY and X-Forwarded-For as needed. - `Peer` filters on the ip of the network request, ignoring PROXY and X-Forwarded-For."', args=[d.arg(name='source', type=d.T.string)]),
        withSource(source): { source: source },
      },
      '#jwtVerificationPolicy':: d.obj(help='"The policy for verifying JWTs for requests to this route."'),
      jwtVerificationPolicy: {
        '#withDisabled':: d.fn(help='"Disabled defines whether to disable all JWT verification for this route. This can be used to opt specific routes out of the default JWT provider for the HTTPProxy. At most one of this field or the \\"require\\" field can be specified."', args=[d.arg(name='disabled', type=d.T.boolean)]),
        withDisabled(disabled): { jwtVerificationPolicy+: { disabled: disabled } },
        '#withRequire':: d.fn(help='"Require names a specific JWT provider (defined in the virtual host) to require for the route. If specified, this field overrides the default provider if one exists. If this field is not specified, the default provider will be required if one exists. At most one of this field or the \\"disabled\\" field can be specified."', args=[d.arg(name='require', type=d.T.string)]),
        withRequire(require): { jwtVerificationPolicy+: { require: require } },
      },
      '#loadBalancerPolicy':: d.obj(help='"The load balancing policy for this route."'),
      loadBalancerPolicy: {
        '#requestHashPolicies':: d.obj(help='"RequestHashPolicies contains a list of hash policies to apply when the `RequestHash` load balancing strategy is chosen. If an element of the supplied list of hash policies is invalid, it will be ignored. If the list of hash policies is empty after validation, the load balancing strategy will fall back to the default `RoundRobin`."'),
        requestHashPolicies: {
          '#headerHashOptions':: d.obj(help='"HeaderHashOptions should be set when request header hash based load balancing is desired. It must be the only hash option field set, otherwise this request hash policy object will be ignored."'),
          headerHashOptions: {
            '#withHeaderName':: d.fn(help='"HeaderName is the name of the HTTP request header that will be used to calculate the hash key. If the header specified is not present on a request, no hash will be produced."', args=[d.arg(name='headerName', type=d.T.string)]),
            withHeaderName(headerName): { headerHashOptions+: { headerName: headerName } },
          },
          '#queryParameterHashOptions':: d.obj(help='"QueryParameterHashOptions should be set when request query parameter hash based load balancing is desired. It must be the only hash option field set, otherwise this request hash policy object will be ignored."'),
          queryParameterHashOptions: {
            '#withParameterName':: d.fn(help='"ParameterName is the name of the HTTP request query parameter that will be used to calculate the hash key. If the query parameter specified is not present on a request, no hash will be produced."', args=[d.arg(name='parameterName', type=d.T.string)]),
            withParameterName(parameterName): { queryParameterHashOptions+: { parameterName: parameterName } },
          },
          '#withHashSourceIP':: d.fn(help='"HashSourceIP should be set to true when request source IP hash based load balancing is desired. It must be the only hash option field set, otherwise this request hash policy object will be ignored."', args=[d.arg(name='hashSourceIP', type=d.T.boolean)]),
          withHashSourceIP(hashSourceIP): { hashSourceIP: hashSourceIP },
          '#withTerminal':: d.fn(help='"Terminal is a flag that allows for short-circuiting computing of a hash for a given request. If set to true, and the request attribute specified in the attribute hash options is present, no further hash policies will be used to calculate a hash for the request."', args=[d.arg(name='terminal', type=d.T.boolean)]),
          withTerminal(terminal): { terminal: terminal },
        },
        '#withRequestHashPolicies':: d.fn(help='"RequestHashPolicies contains a list of hash policies to apply when the `RequestHash` load balancing strategy is chosen. If an element of the supplied list of hash policies is invalid, it will be ignored. If the list of hash policies is empty after validation, the load balancing strategy will fall back to the default `RoundRobin`."', args=[d.arg(name='requestHashPolicies', type=d.T.array)]),
        withRequestHashPolicies(requestHashPolicies): { loadBalancerPolicy+: { requestHashPolicies: if std.isArray(v=requestHashPolicies) then requestHashPolicies else [requestHashPolicies] } },
        '#withRequestHashPoliciesMixin':: d.fn(help='"RequestHashPolicies contains a list of hash policies to apply when the `RequestHash` load balancing strategy is chosen. If an element of the supplied list of hash policies is invalid, it will be ignored. If the list of hash policies is empty after validation, the load balancing strategy will fall back to the default `RoundRobin`."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requestHashPolicies', type=d.T.array)]),
        withRequestHashPoliciesMixin(requestHashPolicies): { loadBalancerPolicy+: { requestHashPolicies+: if std.isArray(v=requestHashPolicies) then requestHashPolicies else [requestHashPolicies] } },
        '#withStrategy':: d.fn(help='"Strategy specifies the policy used to balance requests across the pool of backend pods. Valid policy names are `Random`, `RoundRobin`, `WeightedLeastRequest`, `Cookie`, and `RequestHash`. If an unknown strategy name is specified or no policy is supplied, the default `RoundRobin` policy is used."', args=[d.arg(name='strategy', type=d.T.string)]),
        withStrategy(strategy): { loadBalancerPolicy+: { strategy: strategy } },
      },
      '#pathRewritePolicy':: d.obj(help='"The policy for rewriting the path of the request URL after the request has been routed to a Service."'),
      pathRewritePolicy: {
        '#replacePrefix':: d.obj(help='"ReplacePrefix describes how the path prefix should be replaced."'),
        replacePrefix: {
          '#withPrefix':: d.fn(help='"Prefix specifies the URL path prefix to be replaced. \\n If Prefix is specified, it must exactly match the MatchCondition prefix that is rendered by the chain of including HTTPProxies and only that path prefix will be replaced by Replacement. This allows HTTPProxies that are included through multiple roots to only replace specific path prefixes, leaving others unmodified. \\n If Prefix is not specified, all routing prefixes rendered by the include chain will be replaced."', args=[d.arg(name='prefix', type=d.T.string)]),
          withPrefix(prefix): { prefix: prefix },
          '#withReplacement':: d.fn(help='"Replacement is the string that the routing path prefix will be replaced with. This must not be empty."', args=[d.arg(name='replacement', type=d.T.string)]),
          withReplacement(replacement): { replacement: replacement },
        },
        '#withReplacePrefix':: d.fn(help='"ReplacePrefix describes how the path prefix should be replaced."', args=[d.arg(name='replacePrefix', type=d.T.array)]),
        withReplacePrefix(replacePrefix): { pathRewritePolicy+: { replacePrefix: if std.isArray(v=replacePrefix) then replacePrefix else [replacePrefix] } },
        '#withReplacePrefixMixin':: d.fn(help='"ReplacePrefix describes how the path prefix should be replaced."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='replacePrefix', type=d.T.array)]),
        withReplacePrefixMixin(replacePrefix): { pathRewritePolicy+: { replacePrefix+: if std.isArray(v=replacePrefix) then replacePrefix else [replacePrefix] } },
      },
      '#rateLimitPolicy':: d.obj(help='"The policy for rate limiting on the route."'),
      rateLimitPolicy: {
        '#global':: d.obj(help='"Global defines global rate limiting parameters, i.e. parameters defining descriptors that are sent to an external rate limit service (RLS) for a rate limit decision on each request."'),
        global: {
          '#descriptors':: d.obj(help='"Descriptors defines the list of descriptors that will be generated and sent to the rate limit service. Each descriptor contains 1+ key-value pair entries."'),
          descriptors: {
            '#entries':: d.obj(help='"Entries is the list of key-value pair generators."'),
            entries: {
              '#genericKey':: d.obj(help='"GenericKey defines a descriptor entry with a static key and value."'),
              genericKey: {
                '#withKey':: d.fn(help='"Key defines the key of the descriptor entry. If not set, the key is set to \\"generic_key\\"."', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { genericKey+: { key: key } },
                '#withValue':: d.fn(help='"Value defines the value of the descriptor entry."', args=[d.arg(name='value', type=d.T.string)]),
                withValue(value): { genericKey+: { value: value } },
              },
              '#requestHeader':: d.obj(help="\"RequestHeader defines a descriptor entry that's populated only if a given header is present on the request. The descriptor key is static, and the descriptor value is equal to the value of the header.\""),
              requestHeader: {
                '#withDescriptorKey':: d.fn(help='"DescriptorKey defines the key to use on the descriptor entry."', args=[d.arg(name='descriptorKey', type=d.T.string)]),
                withDescriptorKey(descriptorKey): { requestHeader+: { descriptorKey: descriptorKey } },
                '#withHeaderName':: d.fn(help='"HeaderName defines the name of the header to look for on the request."', args=[d.arg(name='headerName', type=d.T.string)]),
                withHeaderName(headerName): { requestHeader+: { headerName: headerName } },
              },
              '#requestHeaderValueMatch':: d.obj(help="\"RequestHeaderValueMatch defines a descriptor entry that's populated if the request's headers match a set of 1+ match criteria. The descriptor key is \\\"header_match\\\", and the descriptor value is static.\""),
              requestHeaderValueMatch: {
                '#headers':: d.obj(help='"Headers is a list of 1+ match criteria to apply against the request to determine whether to populate the descriptor entry or not."'),
                headers: {
                  '#withContains':: d.fn(help='"Contains specifies a substring that must be present in the header value."', args=[d.arg(name='contains', type=d.T.string)]),
                  withContains(contains): { contains: contains },
                  '#withExact':: d.fn(help='"Exact specifies a string that the header value must be equal to."', args=[d.arg(name='exact', type=d.T.string)]),
                  withExact(exact): { exact: exact },
                  '#withIgnoreCase':: d.fn(help='"IgnoreCase specifies that string matching should be case insensitive. Note that this has no effect on the Regex parameter."', args=[d.arg(name='ignoreCase', type=d.T.boolean)]),
                  withIgnoreCase(ignoreCase): { ignoreCase: ignoreCase },
                  '#withName':: d.fn(help='"Name is the name of the header to match against. Name is required. Header names are case insensitive."', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withNotcontains':: d.fn(help='"NotContains specifies a substring that must not be present in the header value."', args=[d.arg(name='notcontains', type=d.T.string)]),
                  withNotcontains(notcontains): { notcontains: notcontains },
                  '#withNotexact':: d.fn(help='"NoExact specifies a string that the header value must not be equal to. The condition is true if the header has any other value."', args=[d.arg(name='notexact', type=d.T.string)]),
                  withNotexact(notexact): { notexact: notexact },
                  '#withNotpresent':: d.fn(help='"NotPresent specifies that condition is true when the named header is not present. Note that setting NotPresent to false does not make the condition true if the named header is present."', args=[d.arg(name='notpresent', type=d.T.boolean)]),
                  withNotpresent(notpresent): { notpresent: notpresent },
                  '#withPresent':: d.fn(help='"Present specifies that condition is true when the named header is present, regardless of its value. Note that setting Present to false does not make the condition true if the named header is absent."', args=[d.arg(name='present', type=d.T.boolean)]),
                  withPresent(present): { present: present },
                  '#withRegex':: d.fn(help='"Regex specifies a regular expression pattern that must match the header value."', args=[d.arg(name='regex', type=d.T.string)]),
                  withRegex(regex): { regex: regex },
                  '#withTreatMissingAsEmpty':: d.fn(help='"TreatMissingAsEmpty specifies if the header match rule specified header does not exist, this header value will be treated as empty. Defaults to false. Unlike the underlying Envoy implementation this is **only** supported for negative matches (e.g. NotContains, NotExact)."', args=[d.arg(name='treatMissingAsEmpty', type=d.T.boolean)]),
                  withTreatMissingAsEmpty(treatMissingAsEmpty): { treatMissingAsEmpty: treatMissingAsEmpty },
                },
                '#withExpectMatch':: d.fn(help='"ExpectMatch defines whether the request must positively match the match criteria in order to generate a descriptor entry (i.e. true), or not match the match criteria in order to generate a descriptor entry (i.e. false). The default is true."', args=[d.arg(name='expectMatch', type=d.T.boolean)]),
                withExpectMatch(expectMatch): { requestHeaderValueMatch+: { expectMatch: expectMatch } },
                '#withHeaders':: d.fn(help='"Headers is a list of 1+ match criteria to apply against the request to determine whether to populate the descriptor entry or not."', args=[d.arg(name='headers', type=d.T.array)]),
                withHeaders(headers): { requestHeaderValueMatch+: { headers: if std.isArray(v=headers) then headers else [headers] } },
                '#withHeadersMixin':: d.fn(help='"Headers is a list of 1+ match criteria to apply against the request to determine whether to populate the descriptor entry or not."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='headers', type=d.T.array)]),
                withHeadersMixin(headers): { requestHeaderValueMatch+: { headers+: if std.isArray(v=headers) then headers else [headers] } },
                '#withValue':: d.fn(help='"Value defines the value of the descriptor entry."', args=[d.arg(name='value', type=d.T.string)]),
                withValue(value): { requestHeaderValueMatch+: { value: value } },
              },
              '#withRemoteAddress':: d.fn(help="\"RemoteAddress defines a descriptor entry with a key of \\\"remote_address\\\" and a value equal to the client's IP address (from x-forwarded-for).\"", args=[d.arg(name='remoteAddress', type=d.T.object)]),
              withRemoteAddress(remoteAddress): { remoteAddress: remoteAddress },
              '#withRemoteAddressMixin':: d.fn(help="\"RemoteAddress defines a descriptor entry with a key of \\\"remote_address\\\" and a value equal to the client's IP address (from x-forwarded-for).\"\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='remoteAddress', type=d.T.object)]),
              withRemoteAddressMixin(remoteAddress): { remoteAddress+: remoteAddress },
            },
            '#withEntries':: d.fn(help='"Entries is the list of key-value pair generators."', args=[d.arg(name='entries', type=d.T.array)]),
            withEntries(entries): { entries: if std.isArray(v=entries) then entries else [entries] },
            '#withEntriesMixin':: d.fn(help='"Entries is the list of key-value pair generators."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='entries', type=d.T.array)]),
            withEntriesMixin(entries): { entries+: if std.isArray(v=entries) then entries else [entries] },
          },
          '#withDescriptors':: d.fn(help='"Descriptors defines the list of descriptors that will be generated and sent to the rate limit service. Each descriptor contains 1+ key-value pair entries."', args=[d.arg(name='descriptors', type=d.T.array)]),
          withDescriptors(descriptors): { rateLimitPolicy+: { global+: { descriptors: if std.isArray(v=descriptors) then descriptors else [descriptors] } } },
          '#withDescriptorsMixin':: d.fn(help='"Descriptors defines the list of descriptors that will be generated and sent to the rate limit service. Each descriptor contains 1+ key-value pair entries."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='descriptors', type=d.T.array)]),
          withDescriptorsMixin(descriptors): { rateLimitPolicy+: { global+: { descriptors+: if std.isArray(v=descriptors) then descriptors else [descriptors] } } },
          '#withDisabled':: d.fn(help='"Disabled configures the HTTPProxy to not use the default global rate limit policy defined by the Contour configuration."', args=[d.arg(name='disabled', type=d.T.boolean)]),
          withDisabled(disabled): { rateLimitPolicy+: { global+: { disabled: disabled } } },
        },
        '#local':: d.obj(help='"Local defines local rate limiting parameters, i.e. parameters for rate limiting that occurs within each Envoy pod as requests are handled."'),
        'local': {
          '#responseHeadersToAdd':: d.obj(help='"ResponseHeadersToAdd is an optional list of response headers to set when a request is rate-limited."'),
          responseHeadersToAdd: {
            '#withName':: d.fn(help='"Name represents a key of a header"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { name: name },
            '#withValue':: d.fn(help='"Value represents the value of a header specified by a key"', args=[d.arg(name='value', type=d.T.string)]),
            withValue(value): { value: value },
          },
          '#withBurst':: d.fn(help='"Burst defines the number of requests above the requests per unit that should be allowed within a short period of time."', args=[d.arg(name='burst', type=d.T.integer)]),
          withBurst(burst): { rateLimitPolicy+: { 'local'+: { burst: burst } } },
          '#withRequests':: d.fn(help='"Requests defines how many requests per unit of time should be allowed before rate limiting occurs."', args=[d.arg(name='requests', type=d.T.integer)]),
          withRequests(requests): { rateLimitPolicy+: { 'local'+: { requests: requests } } },
          '#withResponseHeadersToAdd':: d.fn(help='"ResponseHeadersToAdd is an optional list of response headers to set when a request is rate-limited."', args=[d.arg(name='responseHeadersToAdd', type=d.T.array)]),
          withResponseHeadersToAdd(responseHeadersToAdd): { rateLimitPolicy+: { 'local'+: { responseHeadersToAdd: if std.isArray(v=responseHeadersToAdd) then responseHeadersToAdd else [responseHeadersToAdd] } } },
          '#withResponseHeadersToAddMixin':: d.fn(help='"ResponseHeadersToAdd is an optional list of response headers to set when a request is rate-limited."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='responseHeadersToAdd', type=d.T.array)]),
          withResponseHeadersToAddMixin(responseHeadersToAdd): { rateLimitPolicy+: { 'local'+: { responseHeadersToAdd+: if std.isArray(v=responseHeadersToAdd) then responseHeadersToAdd else [responseHeadersToAdd] } } },
          '#withResponseStatusCode':: d.fn(help='"ResponseStatusCode is the HTTP status code to use for responses to rate-limited requests. Codes must be in the 400-599 range (inclusive). If not specified, the Envoy default of 429 (Too Many Requests) is used."', args=[d.arg(name='responseStatusCode', type=d.T.integer)]),
          withResponseStatusCode(responseStatusCode): { rateLimitPolicy+: { 'local'+: { responseStatusCode: responseStatusCode } } },
          '#withUnit':: d.fn(help='"Unit defines the period of time within which requests over the limit will be rate limited. Valid values are \\"second\\", \\"minute\\" and \\"hour\\"."', args=[d.arg(name='unit', type=d.T.string)]),
          withUnit(unit): { rateLimitPolicy+: { 'local'+: { unit: unit } } },
        },
      },
      '#requestHeadersPolicy':: d.obj(help='"The policy for managing request headers during proxying."'),
      requestHeadersPolicy: {
        '#set':: d.obj(help='"Set specifies a list of HTTP header values that will be set in the HTTP header. If the header does not exist it will be added, otherwise it will be overwritten with the new value."'),
        set: {
          '#withName':: d.fn(help='"Name represents a key of a header"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
          '#withValue':: d.fn(help='"Value represents the value of a header specified by a key"', args=[d.arg(name='value', type=d.T.string)]),
          withValue(value): { value: value },
        },
        '#withRemove':: d.fn(help='"Remove specifies a list of HTTP header names to remove."', args=[d.arg(name='remove', type=d.T.array)]),
        withRemove(remove): { requestHeadersPolicy+: { remove: if std.isArray(v=remove) then remove else [remove] } },
        '#withRemoveMixin':: d.fn(help='"Remove specifies a list of HTTP header names to remove."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='remove', type=d.T.array)]),
        withRemoveMixin(remove): { requestHeadersPolicy+: { remove+: if std.isArray(v=remove) then remove else [remove] } },
        '#withSet':: d.fn(help='"Set specifies a list of HTTP header values that will be set in the HTTP header. If the header does not exist it will be added, otherwise it will be overwritten with the new value."', args=[d.arg(name='set', type=d.T.array)]),
        withSet(set): { requestHeadersPolicy+: { set: if std.isArray(v=set) then set else [set] } },
        '#withSetMixin':: d.fn(help='"Set specifies a list of HTTP header values that will be set in the HTTP header. If the header does not exist it will be added, otherwise it will be overwritten with the new value."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='set', type=d.T.array)]),
        withSetMixin(set): { requestHeadersPolicy+: { set+: if std.isArray(v=set) then set else [set] } },
      },
      '#requestRedirectPolicy':: d.obj(help='"RequestRedirectPolicy defines an HTTP redirection."'),
      requestRedirectPolicy: {
        '#withHostname':: d.fn(help='"Hostname is the precise hostname to be used in the value of the `Location` header in the response. When empty, the hostname of the request is used. No wildcards are allowed."', args=[d.arg(name='hostname', type=d.T.string)]),
        withHostname(hostname): { requestRedirectPolicy+: { hostname: hostname } },
        '#withPath':: d.fn(help='"Path allows for redirection to a different path from the original on the request. The path must start with a leading slash. \\n Note: Only one of Path or Prefix can be defined."', args=[d.arg(name='path', type=d.T.string)]),
        withPath(path): { requestRedirectPolicy+: { path: path } },
        '#withPort':: d.fn(help='"Port is the port to be used in the value of the `Location` header in the response. When empty, port (if specified) of the request is used."', args=[d.arg(name='port', type=d.T.integer)]),
        withPort(port): { requestRedirectPolicy+: { port: port } },
        '#withPrefix':: d.fn(help='"Prefix defines the value to swap the matched prefix or path with. The prefix must start with a leading slash. \\n Note: Only one of Path or Prefix can be defined."', args=[d.arg(name='prefix', type=d.T.string)]),
        withPrefix(prefix): { requestRedirectPolicy+: { prefix: prefix } },
        '#withScheme':: d.fn(help='"Scheme is the scheme to be used in the value of the `Location` header in the response. When empty, the scheme of the request is used."', args=[d.arg(name='scheme', type=d.T.string)]),
        withScheme(scheme): { requestRedirectPolicy+: { scheme: scheme } },
        '#withStatusCode':: d.fn(help='"StatusCode is the HTTP status code to be used in response."', args=[d.arg(name='statusCode', type=d.T.integer)]),
        withStatusCode(statusCode): { requestRedirectPolicy+: { statusCode: statusCode } },
      },
      '#responseHeadersPolicy':: d.obj(help="\"The policy for managing response headers during proxying. Rewriting the 'Host' header is not supported.\""),
      responseHeadersPolicy: {
        '#set':: d.obj(help='"Set specifies a list of HTTP header values that will be set in the HTTP header. If the header does not exist it will be added, otherwise it will be overwritten with the new value."'),
        set: {
          '#withName':: d.fn(help='"Name represents a key of a header"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
          '#withValue':: d.fn(help='"Value represents the value of a header specified by a key"', args=[d.arg(name='value', type=d.T.string)]),
          withValue(value): { value: value },
        },
        '#withRemove':: d.fn(help='"Remove specifies a list of HTTP header names to remove."', args=[d.arg(name='remove', type=d.T.array)]),
        withRemove(remove): { responseHeadersPolicy+: { remove: if std.isArray(v=remove) then remove else [remove] } },
        '#withRemoveMixin':: d.fn(help='"Remove specifies a list of HTTP header names to remove."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='remove', type=d.T.array)]),
        withRemoveMixin(remove): { responseHeadersPolicy+: { remove+: if std.isArray(v=remove) then remove else [remove] } },
        '#withSet':: d.fn(help='"Set specifies a list of HTTP header values that will be set in the HTTP header. If the header does not exist it will be added, otherwise it will be overwritten with the new value."', args=[d.arg(name='set', type=d.T.array)]),
        withSet(set): { responseHeadersPolicy+: { set: if std.isArray(v=set) then set else [set] } },
        '#withSetMixin':: d.fn(help='"Set specifies a list of HTTP header values that will be set in the HTTP header. If the header does not exist it will be added, otherwise it will be overwritten with the new value."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='set', type=d.T.array)]),
        withSetMixin(set): { responseHeadersPolicy+: { set+: if std.isArray(v=set) then set else [set] } },
      },
      '#retryPolicy':: d.obj(help='"The retry policy for this route."'),
      retryPolicy: {
        '#withCount':: d.fn(help='"NumRetries is maximum allowed number of retries. If set to -1, then retries are disabled. If set to 0 or not supplied, the value is set to the Envoy default of 1."', args=[d.arg(name='count', type=d.T.integer)]),
        withCount(count): { retryPolicy+: { count: count } },
        '#withPerTryTimeout':: d.fn(help='"PerTryTimeout specifies the timeout per retry attempt. Ignored if NumRetries is not supplied."', args=[d.arg(name='perTryTimeout', type=d.T.string)]),
        withPerTryTimeout(perTryTimeout): { retryPolicy+: { perTryTimeout: perTryTimeout } },
        '#withRetriableStatusCodes':: d.fn(help='"RetriableStatusCodes specifies the HTTP status codes that should be retried. \\n This field is only respected when you include `retriable-status-codes` in the `RetryOn` field."', args=[d.arg(name='retriableStatusCodes', type=d.T.array)]),
        withRetriableStatusCodes(retriableStatusCodes): { retryPolicy+: { retriableStatusCodes: if std.isArray(v=retriableStatusCodes) then retriableStatusCodes else [retriableStatusCodes] } },
        '#withRetriableStatusCodesMixin':: d.fn(help='"RetriableStatusCodes specifies the HTTP status codes that should be retried. \\n This field is only respected when you include `retriable-status-codes` in the `RetryOn` field."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='retriableStatusCodes', type=d.T.array)]),
        withRetriableStatusCodesMixin(retriableStatusCodes): { retryPolicy+: { retriableStatusCodes+: if std.isArray(v=retriableStatusCodes) then retriableStatusCodes else [retriableStatusCodes] } },
        '#withRetryOn':: d.fn(help='"RetryOn specifies the conditions on which to retry a request. \\n Supported [HTTP conditions](https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#x-envoy-retry-on): \\n - `5xx` - `gateway-error` - `reset` - `connect-failure` - `retriable-4xx` - `refused-stream` - `retriable-status-codes` - `retriable-headers` \\n Supported [gRPC conditions](https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#x-envoy-retry-grpc-on): \\n - `cancelled` - `deadline-exceeded` - `internal` - `resource-exhausted` - `unavailable`"', args=[d.arg(name='retryOn', type=d.T.array)]),
        withRetryOn(retryOn): { retryPolicy+: { retryOn: if std.isArray(v=retryOn) then retryOn else [retryOn] } },
        '#withRetryOnMixin':: d.fn(help='"RetryOn specifies the conditions on which to retry a request. \\n Supported [HTTP conditions](https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#x-envoy-retry-on): \\n - `5xx` - `gateway-error` - `reset` - `connect-failure` - `retriable-4xx` - `refused-stream` - `retriable-status-codes` - `retriable-headers` \\n Supported [gRPC conditions](https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#x-envoy-retry-grpc-on): \\n - `cancelled` - `deadline-exceeded` - `internal` - `resource-exhausted` - `unavailable`"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='retryOn', type=d.T.array)]),
        withRetryOnMixin(retryOn): { retryPolicy+: { retryOn+: if std.isArray(v=retryOn) then retryOn else [retryOn] } },
      },
      '#services':: d.obj(help='"Services are the services to proxy traffic."'),
      services: {
        '#cookieRewritePolicies':: d.obj(help='"The policies for rewriting Set-Cookie header attributes."'),
        cookieRewritePolicies: {
          '#domainRewrite':: d.obj(help='"DomainRewrite enables rewriting the Set-Cookie Domain element. If not set, Domain will not be rewritten."'),
          domainRewrite: {
            '#withValue':: d.fn(help='"Value is the value to rewrite the Domain attribute to. For now this is required."', args=[d.arg(name='value', type=d.T.string)]),
            withValue(value): { domainRewrite+: { value: value } },
          },
          '#pathRewrite':: d.obj(help='"PathRewrite enables rewriting the Set-Cookie Path element. If not set, Path will not be rewritten."'),
          pathRewrite: {
            '#withValue':: d.fn(help='"Value is the value to rewrite the Path attribute to. For now this is required."', args=[d.arg(name='value', type=d.T.string)]),
            withValue(value): { pathRewrite+: { value: value } },
          },
          '#withName':: d.fn(help='"Name is the name of the cookie for which attributes will be rewritten."', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
          '#withSameSite':: d.fn(help='"SameSite enables rewriting the Set-Cookie SameSite element. If not set, SameSite attribute will not be rewritten."', args=[d.arg(name='sameSite', type=d.T.string)]),
          withSameSite(sameSite): { sameSite: sameSite },
          '#withSecure':: d.fn(help='"Secure enables rewriting the Set-Cookie Secure element. If not set, Secure attribute will not be rewritten."', args=[d.arg(name='secure', type=d.T.boolean)]),
          withSecure(secure): { secure: secure },
        },
        '#requestHeadersPolicy':: d.obj(help='"The policy for managing request headers during proxying."'),
        requestHeadersPolicy: {
          '#set':: d.obj(help='"Set specifies a list of HTTP header values that will be set in the HTTP header. If the header does not exist it will be added, otherwise it will be overwritten with the new value."'),
          set: {
            '#withName':: d.fn(help='"Name represents a key of a header"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { name: name },
            '#withValue':: d.fn(help='"Value represents the value of a header specified by a key"', args=[d.arg(name='value', type=d.T.string)]),
            withValue(value): { value: value },
          },
          '#withRemove':: d.fn(help='"Remove specifies a list of HTTP header names to remove."', args=[d.arg(name='remove', type=d.T.array)]),
          withRemove(remove): { requestHeadersPolicy+: { remove: if std.isArray(v=remove) then remove else [remove] } },
          '#withRemoveMixin':: d.fn(help='"Remove specifies a list of HTTP header names to remove."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='remove', type=d.T.array)]),
          withRemoveMixin(remove): { requestHeadersPolicy+: { remove+: if std.isArray(v=remove) then remove else [remove] } },
          '#withSet':: d.fn(help='"Set specifies a list of HTTP header values that will be set in the HTTP header. If the header does not exist it will be added, otherwise it will be overwritten with the new value."', args=[d.arg(name='set', type=d.T.array)]),
          withSet(set): { requestHeadersPolicy+: { set: if std.isArray(v=set) then set else [set] } },
          '#withSetMixin':: d.fn(help='"Set specifies a list of HTTP header values that will be set in the HTTP header. If the header does not exist it will be added, otherwise it will be overwritten with the new value."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='set', type=d.T.array)]),
          withSetMixin(set): { requestHeadersPolicy+: { set+: if std.isArray(v=set) then set else [set] } },
        },
        '#responseHeadersPolicy':: d.obj(help="\"The policy for managing response headers during proxying. Rewriting the 'Host' header is not supported.\""),
        responseHeadersPolicy: {
          '#set':: d.obj(help='"Set specifies a list of HTTP header values that will be set in the HTTP header. If the header does not exist it will be added, otherwise it will be overwritten with the new value."'),
          set: {
            '#withName':: d.fn(help='"Name represents a key of a header"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { name: name },
            '#withValue':: d.fn(help='"Value represents the value of a header specified by a key"', args=[d.arg(name='value', type=d.T.string)]),
            withValue(value): { value: value },
          },
          '#withRemove':: d.fn(help='"Remove specifies a list of HTTP header names to remove."', args=[d.arg(name='remove', type=d.T.array)]),
          withRemove(remove): { responseHeadersPolicy+: { remove: if std.isArray(v=remove) then remove else [remove] } },
          '#withRemoveMixin':: d.fn(help='"Remove specifies a list of HTTP header names to remove."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='remove', type=d.T.array)]),
          withRemoveMixin(remove): { responseHeadersPolicy+: { remove+: if std.isArray(v=remove) then remove else [remove] } },
          '#withSet':: d.fn(help='"Set specifies a list of HTTP header values that will be set in the HTTP header. If the header does not exist it will be added, otherwise it will be overwritten with the new value."', args=[d.arg(name='set', type=d.T.array)]),
          withSet(set): { responseHeadersPolicy+: { set: if std.isArray(v=set) then set else [set] } },
          '#withSetMixin':: d.fn(help='"Set specifies a list of HTTP header values that will be set in the HTTP header. If the header does not exist it will be added, otherwise it will be overwritten with the new value."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='set', type=d.T.array)]),
          withSetMixin(set): { responseHeadersPolicy+: { set+: if std.isArray(v=set) then set else [set] } },
        },
        '#slowStartPolicy':: d.obj(help='"Slow start will gradually increase amount of traffic to a newly added endpoint."'),
        slowStartPolicy: {
          '#withAggression':: d.fn(help='"The speed of traffic increase over the slow start window. Defaults to 1.0, so that endpoint would get linearly increasing amount of traffic. When increasing the value for this parameter, the speed of traffic ramp-up increases non-linearly. The value of aggression parameter should be greater than 0.0. \\n More info: https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/load_balancing/slow_start"', args=[d.arg(name='aggression', type=d.T.string)]),
          withAggression(aggression): { slowStartPolicy+: { aggression: aggression } },
          '#withMinWeightPercent':: d.fn(help='"The minimum or starting percentage of traffic to send to new endpoints. A non-zero value helps avoid a too small initial weight, which may cause endpoints in slow start mode to receive no traffic in the beginning of the slow start window. If not specified, the default is 10%."', args=[d.arg(name='minWeightPercent', type=d.T.integer)]),
          withMinWeightPercent(minWeightPercent): { slowStartPolicy+: { minWeightPercent: minWeightPercent } },
          '#withWindow':: d.fn(help='"The duration of slow start window. Duration is expressed in the Go [Duration format](https://godoc.org/time#ParseDuration). Valid time units are \\"ns\\", \\"us\\" (or \\"µs\\"), \\"ms\\", \\"s\\", \\"m\\", \\"h\\"."', args=[d.arg(name='window', type=d.T.string)]),
          withWindow(window): { slowStartPolicy+: { window: window } },
        },
        '#validation':: d.obj(help="\"UpstreamValidation defines how to verify the backend service's certificate\""),
        validation: {
          '#withCaSecret':: d.fn(help='"Name or namespaced name of the Kubernetes secret used to validate the certificate presented by the backend. The secret must contain key named ca.crt. The name can be optionally prefixed with namespace \\"namespace/name\\". When cross-namespace reference is used, TLSCertificateDelegation resource must exist in the namespace to grant access to the secret."', args=[d.arg(name='caSecret', type=d.T.string)]),
          withCaSecret(caSecret): { validation+: { caSecret: caSecret } },
          '#withSubjectName':: d.fn(help="\"Key which is expected to be present in the 'subjectAltName' of the presented certificate.\"", args=[d.arg(name='subjectName', type=d.T.string)]),
          withSubjectName(subjectName): { validation+: { subjectName: subjectName } },
        },
        '#withCookieRewritePolicies':: d.fn(help='"The policies for rewriting Set-Cookie header attributes."', args=[d.arg(name='cookieRewritePolicies', type=d.T.array)]),
        withCookieRewritePolicies(cookieRewritePolicies): { cookieRewritePolicies: if std.isArray(v=cookieRewritePolicies) then cookieRewritePolicies else [cookieRewritePolicies] },
        '#withCookieRewritePoliciesMixin':: d.fn(help='"The policies for rewriting Set-Cookie header attributes."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='cookieRewritePolicies', type=d.T.array)]),
        withCookieRewritePoliciesMixin(cookieRewritePolicies): { cookieRewritePolicies+: if std.isArray(v=cookieRewritePolicies) then cookieRewritePolicies else [cookieRewritePolicies] },
        '#withHealthPort':: d.fn(help='"HealthPort is the port for this service healthcheck. If not specified, Port is used for service healthchecks."', args=[d.arg(name='healthPort', type=d.T.integer)]),
        withHealthPort(healthPort): { healthPort: healthPort },
        '#withMirror':: d.fn(help='"If Mirror is true the Service will receive a read only mirror of the traffic for this route. If Mirror is true, then fractional mirroring can be enabled by optionally setting the Weight field. Legal values for Weight are 1-100. Omitting the Weight field will result in 100% mirroring. NOTE: Setting Weight explicitly to 0 will unexpectedly result in 100% traffic mirroring. This occurs since we cannot distinguish omitted fields from those explicitly set to their default values"', args=[d.arg(name='mirror', type=d.T.boolean)]),
        withMirror(mirror): { mirror: mirror },
        '#withName':: d.fn(help='"Name is the name of Kubernetes service to proxy traffic. Names defined here will be used to look up corresponding endpoints which contain the ips to route."', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
        '#withPort':: d.fn(help='"Port (defined as Integer) to proxy traffic to since a service can have multiple defined."', args=[d.arg(name='port', type=d.T.integer)]),
        withPort(port): { port: port },
        '#withProtocol':: d.fn(help='"Protocol may be used to specify (or override) the protocol used to reach this Service. Values may be tls, h2, h2c. If omitted, protocol-selection falls back on Service annotations."', args=[d.arg(name='protocol', type=d.T.string)]),
        withProtocol(protocol): { protocol: protocol },
        '#withWeight':: d.fn(help='"Weight defines percentage of traffic to balance traffic"', args=[d.arg(name='weight', type=d.T.integer)]),
        withWeight(weight): { weight: weight },
      },
      '#timeoutPolicy':: d.obj(help='"The timeout policy for this route."'),
      timeoutPolicy: {
        '#withIdle':: d.fn(help='"Timeout for how long the proxy should wait while there is no activity during single request/response (for HTTP/1.1) or stream (for HTTP/2). Timeout will not trigger while HTTP/1.1 connection is idle between two consecutive requests. If not specified, there is no per-route idle timeout, though a connection manager-wide stream_idle_timeout default of 5m still applies."', args=[d.arg(name='idle', type=d.T.string)]),
        withIdle(idle): { timeoutPolicy+: { idle: idle } },
        '#withIdleConnection':: d.fn(help="\"Timeout for how long connection from the proxy to the upstream service is kept when there are no active requests. If not supplied, Envoy's default value of 1h applies.\"", args=[d.arg(name='idleConnection', type=d.T.string)]),
        withIdleConnection(idleConnection): { timeoutPolicy+: { idleConnection: idleConnection } },
        '#withResponse':: d.fn(help="\"Timeout for receiving a response from the server after processing a request from client. If not supplied, Envoy's default value of 15s applies.\"", args=[d.arg(name='response', type=d.T.string)]),
        withResponse(response): { timeoutPolicy+: { response: response } },
      },
      '#withConditions':: d.fn(help='"Conditions are a set of rules that are applied to a Route. When applied, they are merged using AND, with one exception: There can be only one Prefix, Exact or Regex MatchCondition per Conditions slice. More than one of these condition types, or contradictory Conditions, will make the route invalid."', args=[d.arg(name='conditions', type=d.T.array)]),
      withConditions(conditions): { conditions: if std.isArray(v=conditions) then conditions else [conditions] },
      '#withConditionsMixin':: d.fn(help='"Conditions are a set of rules that are applied to a Route. When applied, they are merged using AND, with one exception: There can be only one Prefix, Exact or Regex MatchCondition per Conditions slice. More than one of these condition types, or contradictory Conditions, will make the route invalid."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='conditions', type=d.T.array)]),
      withConditionsMixin(conditions): { conditions+: if std.isArray(v=conditions) then conditions else [conditions] },
      '#withCookieRewritePolicies':: d.fn(help='"The policies for rewriting Set-Cookie header attributes. Note that rewritten cookie names must be unique in this list. Order rewrite policies are specified in does not matter."', args=[d.arg(name='cookieRewritePolicies', type=d.T.array)]),
      withCookieRewritePolicies(cookieRewritePolicies): { cookieRewritePolicies: if std.isArray(v=cookieRewritePolicies) then cookieRewritePolicies else [cookieRewritePolicies] },
      '#withCookieRewritePoliciesMixin':: d.fn(help='"The policies for rewriting Set-Cookie header attributes. Note that rewritten cookie names must be unique in this list. Order rewrite policies are specified in does not matter."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='cookieRewritePolicies', type=d.T.array)]),
      withCookieRewritePoliciesMixin(cookieRewritePolicies): { cookieRewritePolicies+: if std.isArray(v=cookieRewritePolicies) then cookieRewritePolicies else [cookieRewritePolicies] },
      '#withEnableWebsockets':: d.fn(help='"Enables websocket support for the route."', args=[d.arg(name='enableWebsockets', type=d.T.boolean)]),
      withEnableWebsockets(enableWebsockets): { enableWebsockets: enableWebsockets },
      '#withIpAllowPolicy':: d.fn(help='"IPAllowFilterPolicy is a list of ipv4/6 filter rules for which matching requests should be allowed. All other requests will be denied. Only one of IPAllowFilterPolicy and IPDenyFilterPolicy can be defined. The rules defined here override any rules set on the root HTTPProxy."', args=[d.arg(name='ipAllowPolicy', type=d.T.array)]),
      withIpAllowPolicy(ipAllowPolicy): { ipAllowPolicy: if std.isArray(v=ipAllowPolicy) then ipAllowPolicy else [ipAllowPolicy] },
      '#withIpAllowPolicyMixin':: d.fn(help='"IPAllowFilterPolicy is a list of ipv4/6 filter rules for which matching requests should be allowed. All other requests will be denied. Only one of IPAllowFilterPolicy and IPDenyFilterPolicy can be defined. The rules defined here override any rules set on the root HTTPProxy."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ipAllowPolicy', type=d.T.array)]),
      withIpAllowPolicyMixin(ipAllowPolicy): { ipAllowPolicy+: if std.isArray(v=ipAllowPolicy) then ipAllowPolicy else [ipAllowPolicy] },
      '#withIpDenyPolicy':: d.fn(help='"IPDenyFilterPolicy is a list of ipv4/6 filter rules for which matching requests should be denied. All other requests will be allowed. Only one of IPAllowFilterPolicy and IPDenyFilterPolicy can be defined. The rules defined here override any rules set on the root HTTPProxy."', args=[d.arg(name='ipDenyPolicy', type=d.T.array)]),
      withIpDenyPolicy(ipDenyPolicy): { ipDenyPolicy: if std.isArray(v=ipDenyPolicy) then ipDenyPolicy else [ipDenyPolicy] },
      '#withIpDenyPolicyMixin':: d.fn(help='"IPDenyFilterPolicy is a list of ipv4/6 filter rules for which matching requests should be denied. All other requests will be allowed. Only one of IPAllowFilterPolicy and IPDenyFilterPolicy can be defined. The rules defined here override any rules set on the root HTTPProxy."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ipDenyPolicy', type=d.T.array)]),
      withIpDenyPolicyMixin(ipDenyPolicy): { ipDenyPolicy+: if std.isArray(v=ipDenyPolicy) then ipDenyPolicy else [ipDenyPolicy] },
      '#withPermitInsecure':: d.fn(help='"Allow this path to respond to insecure requests over HTTP which are normally not permitted when a `virtualhost.tls` block is present."', args=[d.arg(name='permitInsecure', type=d.T.boolean)]),
      withPermitInsecure(permitInsecure): { permitInsecure: permitInsecure },
      '#withServices':: d.fn(help='"Services are the services to proxy traffic."', args=[d.arg(name='services', type=d.T.array)]),
      withServices(services): { services: if std.isArray(v=services) then services else [services] },
      '#withServicesMixin':: d.fn(help='"Services are the services to proxy traffic."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='services', type=d.T.array)]),
      withServicesMixin(services): { services+: if std.isArray(v=services) then services else [services] },
    },
    '#tcpproxy':: d.obj(help='"TCPProxy holds TCP proxy information."'),
    tcpproxy: {
      '#healthCheckPolicy':: d.obj(help='"The health check policy for this tcp proxy"'),
      healthCheckPolicy: {
        '#withHealthyThresholdCount':: d.fn(help='"The number of healthy health checks required before a host is marked healthy"', args=[d.arg(name='healthyThresholdCount', type=d.T.integer)]),
        withHealthyThresholdCount(healthyThresholdCount): { spec+: { tcpproxy+: { healthCheckPolicy+: { healthyThresholdCount: healthyThresholdCount } } } },
        '#withIntervalSeconds':: d.fn(help='"The interval (seconds) between health checks"', args=[d.arg(name='intervalSeconds', type=d.T.integer)]),
        withIntervalSeconds(intervalSeconds): { spec+: { tcpproxy+: { healthCheckPolicy+: { intervalSeconds: intervalSeconds } } } },
        '#withTimeoutSeconds':: d.fn(help='"The time to wait (seconds) for a health check response"', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
        withTimeoutSeconds(timeoutSeconds): { spec+: { tcpproxy+: { healthCheckPolicy+: { timeoutSeconds: timeoutSeconds } } } },
        '#withUnhealthyThresholdCount':: d.fn(help='"The number of unhealthy health checks required before a host is marked unhealthy"', args=[d.arg(name='unhealthyThresholdCount', type=d.T.integer)]),
        withUnhealthyThresholdCount(unhealthyThresholdCount): { spec+: { tcpproxy+: { healthCheckPolicy+: { unhealthyThresholdCount: unhealthyThresholdCount } } } },
      },
      '#include':: d.obj(help='"Include specifies that this tcpproxy should be delegated to another HTTPProxy."'),
      include: {
        '#withName':: d.fn(help='"Name of the child HTTPProxy"', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { spec+: { tcpproxy+: { include+: { name: name } } } },
        '#withNamespace':: d.fn(help='"Namespace of the HTTPProxy to include. Defaults to the current namespace if not supplied."', args=[d.arg(name='namespace', type=d.T.string)]),
        withNamespace(namespace): { spec+: { tcpproxy+: { include+: { namespace: namespace } } } },
      },
      '#includes':: d.obj(help='"IncludesDeprecated allow for specific routing configuration to be appended to another HTTPProxy in another namespace. \\n Exists due to a mistake when developing HTTPProxy and the field was marked plural when it should have been singular. This field should stay to not break backwards compatibility to v1 users."'),
      includes: {
        '#withName':: d.fn(help='"Name of the child HTTPProxy"', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { spec+: { tcpproxy+: { includes+: { name: name } } } },
        '#withNamespace':: d.fn(help='"Namespace of the HTTPProxy to include. Defaults to the current namespace if not supplied."', args=[d.arg(name='namespace', type=d.T.string)]),
        withNamespace(namespace): { spec+: { tcpproxy+: { includes+: { namespace: namespace } } } },
      },
      '#loadBalancerPolicy':: d.obj(help='"The load balancing policy for the backend services. Note that the `Cookie` and `RequestHash` load balancing strategies cannot be used here."'),
      loadBalancerPolicy: {
        '#requestHashPolicies':: d.obj(help='"RequestHashPolicies contains a list of hash policies to apply when the `RequestHash` load balancing strategy is chosen. If an element of the supplied list of hash policies is invalid, it will be ignored. If the list of hash policies is empty after validation, the load balancing strategy will fall back to the default `RoundRobin`."'),
        requestHashPolicies: {
          '#headerHashOptions':: d.obj(help='"HeaderHashOptions should be set when request header hash based load balancing is desired. It must be the only hash option field set, otherwise this request hash policy object will be ignored."'),
          headerHashOptions: {
            '#withHeaderName':: d.fn(help='"HeaderName is the name of the HTTP request header that will be used to calculate the hash key. If the header specified is not present on a request, no hash will be produced."', args=[d.arg(name='headerName', type=d.T.string)]),
            withHeaderName(headerName): { headerHashOptions+: { headerName: headerName } },
          },
          '#queryParameterHashOptions':: d.obj(help='"QueryParameterHashOptions should be set when request query parameter hash based load balancing is desired. It must be the only hash option field set, otherwise this request hash policy object will be ignored."'),
          queryParameterHashOptions: {
            '#withParameterName':: d.fn(help='"ParameterName is the name of the HTTP request query parameter that will be used to calculate the hash key. If the query parameter specified is not present on a request, no hash will be produced."', args=[d.arg(name='parameterName', type=d.T.string)]),
            withParameterName(parameterName): { queryParameterHashOptions+: { parameterName: parameterName } },
          },
          '#withHashSourceIP':: d.fn(help='"HashSourceIP should be set to true when request source IP hash based load balancing is desired. It must be the only hash option field set, otherwise this request hash policy object will be ignored."', args=[d.arg(name='hashSourceIP', type=d.T.boolean)]),
          withHashSourceIP(hashSourceIP): { hashSourceIP: hashSourceIP },
          '#withTerminal':: d.fn(help='"Terminal is a flag that allows for short-circuiting computing of a hash for a given request. If set to true, and the request attribute specified in the attribute hash options is present, no further hash policies will be used to calculate a hash for the request."', args=[d.arg(name='terminal', type=d.T.boolean)]),
          withTerminal(terminal): { terminal: terminal },
        },
        '#withRequestHashPolicies':: d.fn(help='"RequestHashPolicies contains a list of hash policies to apply when the `RequestHash` load balancing strategy is chosen. If an element of the supplied list of hash policies is invalid, it will be ignored. If the list of hash policies is empty after validation, the load balancing strategy will fall back to the default `RoundRobin`."', args=[d.arg(name='requestHashPolicies', type=d.T.array)]),
        withRequestHashPolicies(requestHashPolicies): { spec+: { tcpproxy+: { loadBalancerPolicy+: { requestHashPolicies: if std.isArray(v=requestHashPolicies) then requestHashPolicies else [requestHashPolicies] } } } },
        '#withRequestHashPoliciesMixin':: d.fn(help='"RequestHashPolicies contains a list of hash policies to apply when the `RequestHash` load balancing strategy is chosen. If an element of the supplied list of hash policies is invalid, it will be ignored. If the list of hash policies is empty after validation, the load balancing strategy will fall back to the default `RoundRobin`."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requestHashPolicies', type=d.T.array)]),
        withRequestHashPoliciesMixin(requestHashPolicies): { spec+: { tcpproxy+: { loadBalancerPolicy+: { requestHashPolicies+: if std.isArray(v=requestHashPolicies) then requestHashPolicies else [requestHashPolicies] } } } },
        '#withStrategy':: d.fn(help='"Strategy specifies the policy used to balance requests across the pool of backend pods. Valid policy names are `Random`, `RoundRobin`, `WeightedLeastRequest`, `Cookie`, and `RequestHash`. If an unknown strategy name is specified or no policy is supplied, the default `RoundRobin` policy is used."', args=[d.arg(name='strategy', type=d.T.string)]),
        withStrategy(strategy): { spec+: { tcpproxy+: { loadBalancerPolicy+: { strategy: strategy } } } },
      },
      '#services':: d.obj(help='"Services are the services to proxy traffic"'),
      services: {
        '#cookieRewritePolicies':: d.obj(help='"The policies for rewriting Set-Cookie header attributes."'),
        cookieRewritePolicies: {
          '#domainRewrite':: d.obj(help='"DomainRewrite enables rewriting the Set-Cookie Domain element. If not set, Domain will not be rewritten."'),
          domainRewrite: {
            '#withValue':: d.fn(help='"Value is the value to rewrite the Domain attribute to. For now this is required."', args=[d.arg(name='value', type=d.T.string)]),
            withValue(value): { domainRewrite+: { value: value } },
          },
          '#pathRewrite':: d.obj(help='"PathRewrite enables rewriting the Set-Cookie Path element. If not set, Path will not be rewritten."'),
          pathRewrite: {
            '#withValue':: d.fn(help='"Value is the value to rewrite the Path attribute to. For now this is required."', args=[d.arg(name='value', type=d.T.string)]),
            withValue(value): { pathRewrite+: { value: value } },
          },
          '#withName':: d.fn(help='"Name is the name of the cookie for which attributes will be rewritten."', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
          '#withSameSite':: d.fn(help='"SameSite enables rewriting the Set-Cookie SameSite element. If not set, SameSite attribute will not be rewritten."', args=[d.arg(name='sameSite', type=d.T.string)]),
          withSameSite(sameSite): { sameSite: sameSite },
          '#withSecure':: d.fn(help='"Secure enables rewriting the Set-Cookie Secure element. If not set, Secure attribute will not be rewritten."', args=[d.arg(name='secure', type=d.T.boolean)]),
          withSecure(secure): { secure: secure },
        },
        '#requestHeadersPolicy':: d.obj(help='"The policy for managing request headers during proxying."'),
        requestHeadersPolicy: {
          '#set':: d.obj(help='"Set specifies a list of HTTP header values that will be set in the HTTP header. If the header does not exist it will be added, otherwise it will be overwritten with the new value."'),
          set: {
            '#withName':: d.fn(help='"Name represents a key of a header"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { name: name },
            '#withValue':: d.fn(help='"Value represents the value of a header specified by a key"', args=[d.arg(name='value', type=d.T.string)]),
            withValue(value): { value: value },
          },
          '#withRemove':: d.fn(help='"Remove specifies a list of HTTP header names to remove."', args=[d.arg(name='remove', type=d.T.array)]),
          withRemove(remove): { requestHeadersPolicy+: { remove: if std.isArray(v=remove) then remove else [remove] } },
          '#withRemoveMixin':: d.fn(help='"Remove specifies a list of HTTP header names to remove."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='remove', type=d.T.array)]),
          withRemoveMixin(remove): { requestHeadersPolicy+: { remove+: if std.isArray(v=remove) then remove else [remove] } },
          '#withSet':: d.fn(help='"Set specifies a list of HTTP header values that will be set in the HTTP header. If the header does not exist it will be added, otherwise it will be overwritten with the new value."', args=[d.arg(name='set', type=d.T.array)]),
          withSet(set): { requestHeadersPolicy+: { set: if std.isArray(v=set) then set else [set] } },
          '#withSetMixin':: d.fn(help='"Set specifies a list of HTTP header values that will be set in the HTTP header. If the header does not exist it will be added, otherwise it will be overwritten with the new value."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='set', type=d.T.array)]),
          withSetMixin(set): { requestHeadersPolicy+: { set+: if std.isArray(v=set) then set else [set] } },
        },
        '#responseHeadersPolicy':: d.obj(help="\"The policy for managing response headers during proxying. Rewriting the 'Host' header is not supported.\""),
        responseHeadersPolicy: {
          '#set':: d.obj(help='"Set specifies a list of HTTP header values that will be set in the HTTP header. If the header does not exist it will be added, otherwise it will be overwritten with the new value."'),
          set: {
            '#withName':: d.fn(help='"Name represents a key of a header"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { name: name },
            '#withValue':: d.fn(help='"Value represents the value of a header specified by a key"', args=[d.arg(name='value', type=d.T.string)]),
            withValue(value): { value: value },
          },
          '#withRemove':: d.fn(help='"Remove specifies a list of HTTP header names to remove."', args=[d.arg(name='remove', type=d.T.array)]),
          withRemove(remove): { responseHeadersPolicy+: { remove: if std.isArray(v=remove) then remove else [remove] } },
          '#withRemoveMixin':: d.fn(help='"Remove specifies a list of HTTP header names to remove."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='remove', type=d.T.array)]),
          withRemoveMixin(remove): { responseHeadersPolicy+: { remove+: if std.isArray(v=remove) then remove else [remove] } },
          '#withSet':: d.fn(help='"Set specifies a list of HTTP header values that will be set in the HTTP header. If the header does not exist it will be added, otherwise it will be overwritten with the new value."', args=[d.arg(name='set', type=d.T.array)]),
          withSet(set): { responseHeadersPolicy+: { set: if std.isArray(v=set) then set else [set] } },
          '#withSetMixin':: d.fn(help='"Set specifies a list of HTTP header values that will be set in the HTTP header. If the header does not exist it will be added, otherwise it will be overwritten with the new value."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='set', type=d.T.array)]),
          withSetMixin(set): { responseHeadersPolicy+: { set+: if std.isArray(v=set) then set else [set] } },
        },
        '#slowStartPolicy':: d.obj(help='"Slow start will gradually increase amount of traffic to a newly added endpoint."'),
        slowStartPolicy: {
          '#withAggression':: d.fn(help='"The speed of traffic increase over the slow start window. Defaults to 1.0, so that endpoint would get linearly increasing amount of traffic. When increasing the value for this parameter, the speed of traffic ramp-up increases non-linearly. The value of aggression parameter should be greater than 0.0. \\n More info: https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/load_balancing/slow_start"', args=[d.arg(name='aggression', type=d.T.string)]),
          withAggression(aggression): { slowStartPolicy+: { aggression: aggression } },
          '#withMinWeightPercent':: d.fn(help='"The minimum or starting percentage of traffic to send to new endpoints. A non-zero value helps avoid a too small initial weight, which may cause endpoints in slow start mode to receive no traffic in the beginning of the slow start window. If not specified, the default is 10%."', args=[d.arg(name='minWeightPercent', type=d.T.integer)]),
          withMinWeightPercent(minWeightPercent): { slowStartPolicy+: { minWeightPercent: minWeightPercent } },
          '#withWindow':: d.fn(help='"The duration of slow start window. Duration is expressed in the Go [Duration format](https://godoc.org/time#ParseDuration). Valid time units are \\"ns\\", \\"us\\" (or \\"µs\\"), \\"ms\\", \\"s\\", \\"m\\", \\"h\\"."', args=[d.arg(name='window', type=d.T.string)]),
          withWindow(window): { slowStartPolicy+: { window: window } },
        },
        '#validation':: d.obj(help="\"UpstreamValidation defines how to verify the backend service's certificate\""),
        validation: {
          '#withCaSecret':: d.fn(help='"Name or namespaced name of the Kubernetes secret used to validate the certificate presented by the backend. The secret must contain key named ca.crt. The name can be optionally prefixed with namespace \\"namespace/name\\". When cross-namespace reference is used, TLSCertificateDelegation resource must exist in the namespace to grant access to the secret."', args=[d.arg(name='caSecret', type=d.T.string)]),
          withCaSecret(caSecret): { validation+: { caSecret: caSecret } },
          '#withSubjectName':: d.fn(help="\"Key which is expected to be present in the 'subjectAltName' of the presented certificate.\"", args=[d.arg(name='subjectName', type=d.T.string)]),
          withSubjectName(subjectName): { validation+: { subjectName: subjectName } },
        },
        '#withCookieRewritePolicies':: d.fn(help='"The policies for rewriting Set-Cookie header attributes."', args=[d.arg(name='cookieRewritePolicies', type=d.T.array)]),
        withCookieRewritePolicies(cookieRewritePolicies): { cookieRewritePolicies: if std.isArray(v=cookieRewritePolicies) then cookieRewritePolicies else [cookieRewritePolicies] },
        '#withCookieRewritePoliciesMixin':: d.fn(help='"The policies for rewriting Set-Cookie header attributes."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='cookieRewritePolicies', type=d.T.array)]),
        withCookieRewritePoliciesMixin(cookieRewritePolicies): { cookieRewritePolicies+: if std.isArray(v=cookieRewritePolicies) then cookieRewritePolicies else [cookieRewritePolicies] },
        '#withHealthPort':: d.fn(help='"HealthPort is the port for this service healthcheck. If not specified, Port is used for service healthchecks."', args=[d.arg(name='healthPort', type=d.T.integer)]),
        withHealthPort(healthPort): { healthPort: healthPort },
        '#withMirror':: d.fn(help='"If Mirror is true the Service will receive a read only mirror of the traffic for this route. If Mirror is true, then fractional mirroring can be enabled by optionally setting the Weight field. Legal values for Weight are 1-100. Omitting the Weight field will result in 100% mirroring. NOTE: Setting Weight explicitly to 0 will unexpectedly result in 100% traffic mirroring. This occurs since we cannot distinguish omitted fields from those explicitly set to their default values"', args=[d.arg(name='mirror', type=d.T.boolean)]),
        withMirror(mirror): { mirror: mirror },
        '#withName':: d.fn(help='"Name is the name of Kubernetes service to proxy traffic. Names defined here will be used to look up corresponding endpoints which contain the ips to route."', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
        '#withPort':: d.fn(help='"Port (defined as Integer) to proxy traffic to since a service can have multiple defined."', args=[d.arg(name='port', type=d.T.integer)]),
        withPort(port): { port: port },
        '#withProtocol':: d.fn(help='"Protocol may be used to specify (or override) the protocol used to reach this Service. Values may be tls, h2, h2c. If omitted, protocol-selection falls back on Service annotations."', args=[d.arg(name='protocol', type=d.T.string)]),
        withProtocol(protocol): { protocol: protocol },
        '#withWeight':: d.fn(help='"Weight defines percentage of traffic to balance traffic"', args=[d.arg(name='weight', type=d.T.integer)]),
        withWeight(weight): { weight: weight },
      },
      '#withServices':: d.fn(help='"Services are the services to proxy traffic"', args=[d.arg(name='services', type=d.T.array)]),
      withServices(services): { spec+: { tcpproxy+: { services: if std.isArray(v=services) then services else [services] } } },
      '#withServicesMixin':: d.fn(help='"Services are the services to proxy traffic"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='services', type=d.T.array)]),
      withServicesMixin(services): { spec+: { tcpproxy+: { services+: if std.isArray(v=services) then services else [services] } } },
    },
    '#virtualhost':: d.obj(help='"Virtualhost appears at most once. If it is present, the object is considered to be a \\"root\\" HTTPProxy."'),
    virtualhost: {
      '#authorization':: d.obj(help='"This field configures an extension service to perform authorization for this virtual host. Authorization can only be configured on virtual hosts that have TLS enabled. If the TLS configuration requires client certificate validation, the client certificate is always included in the authentication check request."'),
      authorization: {
        '#authPolicy':: d.obj(help='"AuthPolicy sets a default authorization policy for client requests. This policy will be used unless overridden by individual routes."'),
        authPolicy: {
          '#withContext':: d.fn(help='"Context is a set of key/value pairs that are sent to the authentication server in the check request. If a context is provided at an enclosing scope, the entries are merged such that the inner scope overrides matching keys from the outer scope."', args=[d.arg(name='context', type=d.T.object)]),
          withContext(context): { spec+: { virtualhost+: { authorization+: { authPolicy+: { context: context } } } } },
          '#withContextMixin':: d.fn(help='"Context is a set of key/value pairs that are sent to the authentication server in the check request. If a context is provided at an enclosing scope, the entries are merged such that the inner scope overrides matching keys from the outer scope."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='context', type=d.T.object)]),
          withContextMixin(context): { spec+: { virtualhost+: { authorization+: { authPolicy+: { context+: context } } } } },
          '#withDisabled':: d.fn(help='"When true, this field disables client request authentication for the scope of the policy."', args=[d.arg(name='disabled', type=d.T.boolean)]),
          withDisabled(disabled): { spec+: { virtualhost+: { authorization+: { authPolicy+: { disabled: disabled } } } } },
        },
        '#extensionRef':: d.obj(help='"ExtensionServiceRef specifies the extension resource that will authorize client requests."'),
        extensionRef: {
          '#withApiVersion':: d.fn(help='"API version of the referent. If this field is not specified, the default \\"projectcontour.io/v1alpha1\\" will be used"', args=[d.arg(name='apiVersion', type=d.T.string)]),
          withApiVersion(apiVersion): { spec+: { virtualhost+: { authorization+: { extensionRef+: { apiVersion: apiVersion } } } } },
          '#withName':: d.fn(help='"Name of the referent. \\n More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { spec+: { virtualhost+: { authorization+: { extensionRef+: { name: name } } } } },
          '#withNamespace':: d.fn(help='"Namespace of the referent. If this field is not specifies, the namespace of the resource that targets the referent will be used. \\n More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"', args=[d.arg(name='namespace', type=d.T.string)]),
          withNamespace(namespace): { spec+: { virtualhost+: { authorization+: { extensionRef+: { namespace: namespace } } } } },
        },
        '#withFailOpen':: d.fn(help='"If FailOpen is true, the client request is forwarded to the upstream service even if the authorization server fails to respond. This field should not be set in most cases. It is intended for use only while migrating applications from internal authorization to Contour external authorization."', args=[d.arg(name='failOpen', type=d.T.boolean)]),
        withFailOpen(failOpen): { spec+: { virtualhost+: { authorization+: { failOpen: failOpen } } } },
        '#withRequestBody':: d.obj(help="\"WithRequestBody specifies configuration for sending the client request's body to authorization server.\""),
        withRequestBody: {
          '#withAllowPartialMessage':: d.fn(help='"If AllowPartialMessage is true, then Envoy will buffer the body until MaxRequestBytes are reached."', args=[d.arg(name='allowPartialMessage', type=d.T.boolean)]),
          withAllowPartialMessage(allowPartialMessage): { spec+: { virtualhost+: { authorization+: { withRequestBody+: { allowPartialMessage: allowPartialMessage } } } } },
          '#withMaxRequestBytes':: d.fn(help='"MaxRequestBytes sets the maximum size of message body ExtAuthz filter will hold in-memory."', args=[d.arg(name='maxRequestBytes', type=d.T.integer)]),
          withMaxRequestBytes(maxRequestBytes): { spec+: { virtualhost+: { authorization+: { withRequestBody+: { maxRequestBytes: maxRequestBytes } } } } },
          '#withPackAsBytes':: d.fn(help='"If PackAsBytes is true, the body sent to Authorization Server is in raw bytes."', args=[d.arg(name='packAsBytes', type=d.T.boolean)]),
          withPackAsBytes(packAsBytes): { spec+: { virtualhost+: { authorization+: { withRequestBody+: { packAsBytes: packAsBytes } } } } },
        },
        '#withResponseTimeout':: d.fn(help='"ResponseTimeout configures maximum time to wait for a check response from the authorization server. Timeout durations are expressed in the Go [Duration format](https://godoc.org/time#ParseDuration). Valid time units are \\"ns\\", \\"us\\" (or \\"µs\\"), \\"ms\\", \\"s\\", \\"m\\", \\"h\\". The string \\"infinity\\" is also a valid input and specifies no timeout."', args=[d.arg(name='responseTimeout', type=d.T.string)]),
        withResponseTimeout(responseTimeout): { spec+: { virtualhost+: { authorization+: { responseTimeout: responseTimeout } } } },
      },
      '#corsPolicy':: d.obj(help='"Specifies the cross-origin policy to apply to the VirtualHost."'),
      corsPolicy: {
        '#withAllowCredentials':: d.fn(help='"Specifies whether the resource allows credentials."', args=[d.arg(name='allowCredentials', type=d.T.boolean)]),
        withAllowCredentials(allowCredentials): { spec+: { virtualhost+: { corsPolicy+: { allowCredentials: allowCredentials } } } },
        '#withAllowHeaders':: d.fn(help='"AllowHeaders specifies the content for the *access-control-allow-headers* header."', args=[d.arg(name='allowHeaders', type=d.T.array)]),
        withAllowHeaders(allowHeaders): { spec+: { virtualhost+: { corsPolicy+: { allowHeaders: if std.isArray(v=allowHeaders) then allowHeaders else [allowHeaders] } } } },
        '#withAllowHeadersMixin':: d.fn(help='"AllowHeaders specifies the content for the *access-control-allow-headers* header."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='allowHeaders', type=d.T.array)]),
        withAllowHeadersMixin(allowHeaders): { spec+: { virtualhost+: { corsPolicy+: { allowHeaders+: if std.isArray(v=allowHeaders) then allowHeaders else [allowHeaders] } } } },
        '#withAllowMethods':: d.fn(help='"AllowMethods specifies the content for the *access-control-allow-methods* header."', args=[d.arg(name='allowMethods', type=d.T.array)]),
        withAllowMethods(allowMethods): { spec+: { virtualhost+: { corsPolicy+: { allowMethods: if std.isArray(v=allowMethods) then allowMethods else [allowMethods] } } } },
        '#withAllowMethodsMixin':: d.fn(help='"AllowMethods specifies the content for the *access-control-allow-methods* header."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='allowMethods', type=d.T.array)]),
        withAllowMethodsMixin(allowMethods): { spec+: { virtualhost+: { corsPolicy+: { allowMethods+: if std.isArray(v=allowMethods) then allowMethods else [allowMethods] } } } },
        '#withAllowOrigin':: d.fn(help='"AllowOrigin specifies the origins that will be allowed to do CORS requests. Allowed values include \\"*\\" which signifies any origin is allowed, an exact origin of the form \\"scheme://host[:port]\\" (where port is optional), or a valid regex pattern. Note that regex patterns are validated and a simple \\"glob\\" pattern (e.g. *.foo.com) will be rejected or produce unexpected matches when applied as a regex."', args=[d.arg(name='allowOrigin', type=d.T.array)]),
        withAllowOrigin(allowOrigin): { spec+: { virtualhost+: { corsPolicy+: { allowOrigin: if std.isArray(v=allowOrigin) then allowOrigin else [allowOrigin] } } } },
        '#withAllowOriginMixin':: d.fn(help='"AllowOrigin specifies the origins that will be allowed to do CORS requests. Allowed values include \\"*\\" which signifies any origin is allowed, an exact origin of the form \\"scheme://host[:port]\\" (where port is optional), or a valid regex pattern. Note that regex patterns are validated and a simple \\"glob\\" pattern (e.g. *.foo.com) will be rejected or produce unexpected matches when applied as a regex."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='allowOrigin', type=d.T.array)]),
        withAllowOriginMixin(allowOrigin): { spec+: { virtualhost+: { corsPolicy+: { allowOrigin+: if std.isArray(v=allowOrigin) then allowOrigin else [allowOrigin] } } } },
        '#withAllowPrivateNetwork':: d.fn(help='"AllowPrivateNetwork specifies whether to allow private network requests. See https://developer.chrome.com/blog/private-network-access-preflight."', args=[d.arg(name='allowPrivateNetwork', type=d.T.boolean)]),
        withAllowPrivateNetwork(allowPrivateNetwork): { spec+: { virtualhost+: { corsPolicy+: { allowPrivateNetwork: allowPrivateNetwork } } } },
        '#withExposeHeaders':: d.fn(help='"ExposeHeaders Specifies the content for the *access-control-expose-headers* header."', args=[d.arg(name='exposeHeaders', type=d.T.array)]),
        withExposeHeaders(exposeHeaders): { spec+: { virtualhost+: { corsPolicy+: { exposeHeaders: if std.isArray(v=exposeHeaders) then exposeHeaders else [exposeHeaders] } } } },
        '#withExposeHeadersMixin':: d.fn(help='"ExposeHeaders Specifies the content for the *access-control-expose-headers* header."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='exposeHeaders', type=d.T.array)]),
        withExposeHeadersMixin(exposeHeaders): { spec+: { virtualhost+: { corsPolicy+: { exposeHeaders+: if std.isArray(v=exposeHeaders) then exposeHeaders else [exposeHeaders] } } } },
        '#withMaxAge':: d.fn(help='"MaxAge indicates for how long the results of a preflight request can be cached. MaxAge durations are expressed in the Go [Duration format](https://godoc.org/time#ParseDuration). Valid time units are \\"ns\\", \\"us\\" (or \\"µs\\"), \\"ms\\", \\"s\\", \\"m\\", \\"h\\". Only positive values are allowed while 0 disables the cache requiring a preflight OPTIONS check for all cross-origin requests."', args=[d.arg(name='maxAge', type=d.T.string)]),
        withMaxAge(maxAge): { spec+: { virtualhost+: { corsPolicy+: { maxAge: maxAge } } } },
      },
      '#ipAllowPolicy':: d.obj(help='"IPAllowFilterPolicy is a list of ipv4/6 filter rules for which matching requests should be allowed. All other requests will be denied. Only one of IPAllowFilterPolicy and IPDenyFilterPolicy can be defined. The rules defined here may be overridden in a Route."'),
      ipAllowPolicy: {
        '#withCidr':: d.fn(help='"CIDR is a CIDR block of ipv4 or ipv6 addresses to filter on. This can also be a bare IP address (without a mask) to filter on exactly one address."', args=[d.arg(name='cidr', type=d.T.string)]),
        withCidr(cidr): { cidr: cidr },
        '#withSource':: d.fn(help='"Source indicates how to determine the ip address to filter on, and can be one of two values: - `Remote` filters on the ip address of the client, accounting for PROXY and X-Forwarded-For as needed. - `Peer` filters on the ip of the network request, ignoring PROXY and X-Forwarded-For."', args=[d.arg(name='source', type=d.T.string)]),
        withSource(source): { source: source },
      },
      '#ipDenyPolicy':: d.obj(help='"IPDenyFilterPolicy is a list of ipv4/6 filter rules for which matching requests should be denied. All other requests will be allowed. Only one of IPAllowFilterPolicy and IPDenyFilterPolicy can be defined. The rules defined here may be overridden in a Route."'),
      ipDenyPolicy: {
        '#withCidr':: d.fn(help='"CIDR is a CIDR block of ipv4 or ipv6 addresses to filter on. This can also be a bare IP address (without a mask) to filter on exactly one address."', args=[d.arg(name='cidr', type=d.T.string)]),
        withCidr(cidr): { cidr: cidr },
        '#withSource':: d.fn(help='"Source indicates how to determine the ip address to filter on, and can be one of two values: - `Remote` filters on the ip address of the client, accounting for PROXY and X-Forwarded-For as needed. - `Peer` filters on the ip of the network request, ignoring PROXY and X-Forwarded-For."', args=[d.arg(name='source', type=d.T.string)]),
        withSource(source): { source: source },
      },
      '#jwtProviders':: d.obj(help='"Providers to use for verifying JSON Web Tokens (JWTs) on the virtual host."'),
      jwtProviders: {
        '#remoteJWKS':: d.obj(help='"Remote JWKS to use for verifying JWT signatures."'),
        remoteJWKS: {
          '#validation':: d.obj(help="\"UpstreamValidation defines how to verify the JWKS's TLS certificate.\""),
          validation: {
            '#withCaSecret':: d.fn(help='"Name or namespaced name of the Kubernetes secret used to validate the certificate presented by the backend. The secret must contain key named ca.crt. The name can be optionally prefixed with namespace \\"namespace/name\\". When cross-namespace reference is used, TLSCertificateDelegation resource must exist in the namespace to grant access to the secret."', args=[d.arg(name='caSecret', type=d.T.string)]),
            withCaSecret(caSecret): { remoteJWKS+: { validation+: { caSecret: caSecret } } },
            '#withSubjectName':: d.fn(help="\"Key which is expected to be present in the 'subjectAltName' of the presented certificate.\"", args=[d.arg(name='subjectName', type=d.T.string)]),
            withSubjectName(subjectName): { remoteJWKS+: { validation+: { subjectName: subjectName } } },
          },
          '#withCacheDuration':: d.fn(help="\"How long to cache the JWKS locally. If not specified, Envoy's default of 5m applies.\"", args=[d.arg(name='cacheDuration', type=d.T.string)]),
          withCacheDuration(cacheDuration): { remoteJWKS+: { cacheDuration: cacheDuration } },
          '#withDnsLookupFamily':: d.fn(help='"The DNS IP address resolution policy for the JWKS URI. When configured as \\"v4\\", the DNS resolver will only perform a lookup for addresses in the IPv4 family. If \\"v6\\" is configured, the DNS resolver will only perform a lookup for addresses in the IPv6 family. If \\"all\\" is configured, the DNS resolver will perform a lookup for addresses in both the IPv4 and IPv6 family. If \\"auto\\" is configured, the DNS resolver will first perform a lookup for addresses in the IPv6 family and fallback to a lookup for addresses in the IPv4 family. If not specified, the Contour-wide setting defined in the config file or ContourConfiguration applies (defaults to \\"auto\\"). \\n See https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/cluster/v3/cluster.proto.html#envoy-v3-api-enum-config-cluster-v3-cluster-dnslookupfamily for more information."', args=[d.arg(name='dnsLookupFamily', type=d.T.string)]),
          withDnsLookupFamily(dnsLookupFamily): { remoteJWKS+: { dnsLookupFamily: dnsLookupFamily } },
          '#withTimeout':: d.fn(help='"How long to wait for a response from the URI. If not specified, a default of 1s applies."', args=[d.arg(name='timeout', type=d.T.string)]),
          withTimeout(timeout): { remoteJWKS+: { timeout: timeout } },
          '#withUri':: d.fn(help='"The URI for the JWKS."', args=[d.arg(name='uri', type=d.T.string)]),
          withUri(uri): { remoteJWKS+: { uri: uri } },
        },
        '#withAudiences':: d.fn(help='"Audiences that JWTs are allowed to have in the \\"aud\\" field. If not provided, JWT audiences are not checked."', args=[d.arg(name='audiences', type=d.T.array)]),
        withAudiences(audiences): { audiences: if std.isArray(v=audiences) then audiences else [audiences] },
        '#withAudiencesMixin':: d.fn(help='"Audiences that JWTs are allowed to have in the \\"aud\\" field. If not provided, JWT audiences are not checked."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='audiences', type=d.T.array)]),
        withAudiencesMixin(audiences): { audiences+: if std.isArray(v=audiences) then audiences else [audiences] },
        '#withDefault':: d.fn(help='"Whether the provider should apply to all routes in the HTTPProxy/its includes by default. At most one provider can be marked as the default. If no provider is marked as the default, individual routes must explicitly identify the provider they require."', args=[d.arg(name='default', type=d.T.boolean)]),
        withDefault(default): { default: default },
        '#withForwardJWT':: d.fn(help='"Whether the JWT should be forwarded to the backend service after successful verification. By default, the JWT is not forwarded."', args=[d.arg(name='forwardJWT', type=d.T.boolean)]),
        withForwardJWT(forwardJWT): { forwardJWT: forwardJWT },
        '#withIssuer':: d.fn(help='"Issuer that JWTs are required to have in the \\"iss\\" field. If not provided, JWT issuers are not checked."', args=[d.arg(name='issuer', type=d.T.string)]),
        withIssuer(issuer): { issuer: issuer },
        '#withName':: d.fn(help='"Unique name for the provider."', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
      },
      '#rateLimitPolicy':: d.obj(help='"The policy for rate limiting on the virtual host."'),
      rateLimitPolicy: {
        '#global':: d.obj(help='"Global defines global rate limiting parameters, i.e. parameters defining descriptors that are sent to an external rate limit service (RLS) for a rate limit decision on each request."'),
        global: {
          '#descriptors':: d.obj(help='"Descriptors defines the list of descriptors that will be generated and sent to the rate limit service. Each descriptor contains 1+ key-value pair entries."'),
          descriptors: {
            '#entries':: d.obj(help='"Entries is the list of key-value pair generators."'),
            entries: {
              '#genericKey':: d.obj(help='"GenericKey defines a descriptor entry with a static key and value."'),
              genericKey: {
                '#withKey':: d.fn(help='"Key defines the key of the descriptor entry. If not set, the key is set to \\"generic_key\\"."', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { genericKey+: { key: key } },
                '#withValue':: d.fn(help='"Value defines the value of the descriptor entry."', args=[d.arg(name='value', type=d.T.string)]),
                withValue(value): { genericKey+: { value: value } },
              },
              '#requestHeader':: d.obj(help="\"RequestHeader defines a descriptor entry that's populated only if a given header is present on the request. The descriptor key is static, and the descriptor value is equal to the value of the header.\""),
              requestHeader: {
                '#withDescriptorKey':: d.fn(help='"DescriptorKey defines the key to use on the descriptor entry."', args=[d.arg(name='descriptorKey', type=d.T.string)]),
                withDescriptorKey(descriptorKey): { requestHeader+: { descriptorKey: descriptorKey } },
                '#withHeaderName':: d.fn(help='"HeaderName defines the name of the header to look for on the request."', args=[d.arg(name='headerName', type=d.T.string)]),
                withHeaderName(headerName): { requestHeader+: { headerName: headerName } },
              },
              '#requestHeaderValueMatch':: d.obj(help="\"RequestHeaderValueMatch defines a descriptor entry that's populated if the request's headers match a set of 1+ match criteria. The descriptor key is \\\"header_match\\\", and the descriptor value is static.\""),
              requestHeaderValueMatch: {
                '#headers':: d.obj(help='"Headers is a list of 1+ match criteria to apply against the request to determine whether to populate the descriptor entry or not."'),
                headers: {
                  '#withContains':: d.fn(help='"Contains specifies a substring that must be present in the header value."', args=[d.arg(name='contains', type=d.T.string)]),
                  withContains(contains): { contains: contains },
                  '#withExact':: d.fn(help='"Exact specifies a string that the header value must be equal to."', args=[d.arg(name='exact', type=d.T.string)]),
                  withExact(exact): { exact: exact },
                  '#withIgnoreCase':: d.fn(help='"IgnoreCase specifies that string matching should be case insensitive. Note that this has no effect on the Regex parameter."', args=[d.arg(name='ignoreCase', type=d.T.boolean)]),
                  withIgnoreCase(ignoreCase): { ignoreCase: ignoreCase },
                  '#withName':: d.fn(help='"Name is the name of the header to match against. Name is required. Header names are case insensitive."', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { name: name },
                  '#withNotcontains':: d.fn(help='"NotContains specifies a substring that must not be present in the header value."', args=[d.arg(name='notcontains', type=d.T.string)]),
                  withNotcontains(notcontains): { notcontains: notcontains },
                  '#withNotexact':: d.fn(help='"NoExact specifies a string that the header value must not be equal to. The condition is true if the header has any other value."', args=[d.arg(name='notexact', type=d.T.string)]),
                  withNotexact(notexact): { notexact: notexact },
                  '#withNotpresent':: d.fn(help='"NotPresent specifies that condition is true when the named header is not present. Note that setting NotPresent to false does not make the condition true if the named header is present."', args=[d.arg(name='notpresent', type=d.T.boolean)]),
                  withNotpresent(notpresent): { notpresent: notpresent },
                  '#withPresent':: d.fn(help='"Present specifies that condition is true when the named header is present, regardless of its value. Note that setting Present to false does not make the condition true if the named header is absent."', args=[d.arg(name='present', type=d.T.boolean)]),
                  withPresent(present): { present: present },
                  '#withRegex':: d.fn(help='"Regex specifies a regular expression pattern that must match the header value."', args=[d.arg(name='regex', type=d.T.string)]),
                  withRegex(regex): { regex: regex },
                  '#withTreatMissingAsEmpty':: d.fn(help='"TreatMissingAsEmpty specifies if the header match rule specified header does not exist, this header value will be treated as empty. Defaults to false. Unlike the underlying Envoy implementation this is **only** supported for negative matches (e.g. NotContains, NotExact)."', args=[d.arg(name='treatMissingAsEmpty', type=d.T.boolean)]),
                  withTreatMissingAsEmpty(treatMissingAsEmpty): { treatMissingAsEmpty: treatMissingAsEmpty },
                },
                '#withExpectMatch':: d.fn(help='"ExpectMatch defines whether the request must positively match the match criteria in order to generate a descriptor entry (i.e. true), or not match the match criteria in order to generate a descriptor entry (i.e. false). The default is true."', args=[d.arg(name='expectMatch', type=d.T.boolean)]),
                withExpectMatch(expectMatch): { requestHeaderValueMatch+: { expectMatch: expectMatch } },
                '#withHeaders':: d.fn(help='"Headers is a list of 1+ match criteria to apply against the request to determine whether to populate the descriptor entry or not."', args=[d.arg(name='headers', type=d.T.array)]),
                withHeaders(headers): { requestHeaderValueMatch+: { headers: if std.isArray(v=headers) then headers else [headers] } },
                '#withHeadersMixin':: d.fn(help='"Headers is a list of 1+ match criteria to apply against the request to determine whether to populate the descriptor entry or not."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='headers', type=d.T.array)]),
                withHeadersMixin(headers): { requestHeaderValueMatch+: { headers+: if std.isArray(v=headers) then headers else [headers] } },
                '#withValue':: d.fn(help='"Value defines the value of the descriptor entry."', args=[d.arg(name='value', type=d.T.string)]),
                withValue(value): { requestHeaderValueMatch+: { value: value } },
              },
              '#withRemoteAddress':: d.fn(help="\"RemoteAddress defines a descriptor entry with a key of \\\"remote_address\\\" and a value equal to the client's IP address (from x-forwarded-for).\"", args=[d.arg(name='remoteAddress', type=d.T.object)]),
              withRemoteAddress(remoteAddress): { remoteAddress: remoteAddress },
              '#withRemoteAddressMixin':: d.fn(help="\"RemoteAddress defines a descriptor entry with a key of \\\"remote_address\\\" and a value equal to the client's IP address (from x-forwarded-for).\"\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='remoteAddress', type=d.T.object)]),
              withRemoteAddressMixin(remoteAddress): { remoteAddress+: remoteAddress },
            },
            '#withEntries':: d.fn(help='"Entries is the list of key-value pair generators."', args=[d.arg(name='entries', type=d.T.array)]),
            withEntries(entries): { entries: if std.isArray(v=entries) then entries else [entries] },
            '#withEntriesMixin':: d.fn(help='"Entries is the list of key-value pair generators."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='entries', type=d.T.array)]),
            withEntriesMixin(entries): { entries+: if std.isArray(v=entries) then entries else [entries] },
          },
          '#withDescriptors':: d.fn(help='"Descriptors defines the list of descriptors that will be generated and sent to the rate limit service. Each descriptor contains 1+ key-value pair entries."', args=[d.arg(name='descriptors', type=d.T.array)]),
          withDescriptors(descriptors): { spec+: { virtualhost+: { rateLimitPolicy+: { global+: { descriptors: if std.isArray(v=descriptors) then descriptors else [descriptors] } } } } },
          '#withDescriptorsMixin':: d.fn(help='"Descriptors defines the list of descriptors that will be generated and sent to the rate limit service. Each descriptor contains 1+ key-value pair entries."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='descriptors', type=d.T.array)]),
          withDescriptorsMixin(descriptors): { spec+: { virtualhost+: { rateLimitPolicy+: { global+: { descriptors+: if std.isArray(v=descriptors) then descriptors else [descriptors] } } } } },
          '#withDisabled':: d.fn(help='"Disabled configures the HTTPProxy to not use the default global rate limit policy defined by the Contour configuration."', args=[d.arg(name='disabled', type=d.T.boolean)]),
          withDisabled(disabled): { spec+: { virtualhost+: { rateLimitPolicy+: { global+: { disabled: disabled } } } } },
        },
        '#local':: d.obj(help='"Local defines local rate limiting parameters, i.e. parameters for rate limiting that occurs within each Envoy pod as requests are handled."'),
        'local': {
          '#responseHeadersToAdd':: d.obj(help='"ResponseHeadersToAdd is an optional list of response headers to set when a request is rate-limited."'),
          responseHeadersToAdd: {
            '#withName':: d.fn(help='"Name represents a key of a header"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { name: name },
            '#withValue':: d.fn(help='"Value represents the value of a header specified by a key"', args=[d.arg(name='value', type=d.T.string)]),
            withValue(value): { value: value },
          },
          '#withBurst':: d.fn(help='"Burst defines the number of requests above the requests per unit that should be allowed within a short period of time."', args=[d.arg(name='burst', type=d.T.integer)]),
          withBurst(burst): { spec+: { virtualhost+: { rateLimitPolicy+: { 'local'+: { burst: burst } } } } },
          '#withRequests':: d.fn(help='"Requests defines how many requests per unit of time should be allowed before rate limiting occurs."', args=[d.arg(name='requests', type=d.T.integer)]),
          withRequests(requests): { spec+: { virtualhost+: { rateLimitPolicy+: { 'local'+: { requests: requests } } } } },
          '#withResponseHeadersToAdd':: d.fn(help='"ResponseHeadersToAdd is an optional list of response headers to set when a request is rate-limited."', args=[d.arg(name='responseHeadersToAdd', type=d.T.array)]),
          withResponseHeadersToAdd(responseHeadersToAdd): { spec+: { virtualhost+: { rateLimitPolicy+: { 'local'+: { responseHeadersToAdd: if std.isArray(v=responseHeadersToAdd) then responseHeadersToAdd else [responseHeadersToAdd] } } } } },
          '#withResponseHeadersToAddMixin':: d.fn(help='"ResponseHeadersToAdd is an optional list of response headers to set when a request is rate-limited."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='responseHeadersToAdd', type=d.T.array)]),
          withResponseHeadersToAddMixin(responseHeadersToAdd): { spec+: { virtualhost+: { rateLimitPolicy+: { 'local'+: { responseHeadersToAdd+: if std.isArray(v=responseHeadersToAdd) then responseHeadersToAdd else [responseHeadersToAdd] } } } } },
          '#withResponseStatusCode':: d.fn(help='"ResponseStatusCode is the HTTP status code to use for responses to rate-limited requests. Codes must be in the 400-599 range (inclusive). If not specified, the Envoy default of 429 (Too Many Requests) is used."', args=[d.arg(name='responseStatusCode', type=d.T.integer)]),
          withResponseStatusCode(responseStatusCode): { spec+: { virtualhost+: { rateLimitPolicy+: { 'local'+: { responseStatusCode: responseStatusCode } } } } },
          '#withUnit':: d.fn(help='"Unit defines the period of time within which requests over the limit will be rate limited. Valid values are \\"second\\", \\"minute\\" and \\"hour\\"."', args=[d.arg(name='unit', type=d.T.string)]),
          withUnit(unit): { spec+: { virtualhost+: { rateLimitPolicy+: { 'local'+: { unit: unit } } } } },
        },
      },
      '#tls':: d.obj(help='"If present the fields describes TLS properties of the virtual host. The SNI names that will be matched on are described in fqdn, the tls.secretName secret must contain a certificate that itself contains a name that matches the FQDN."'),
      tls: {
        '#clientValidation':: d.obj(help='"ClientValidation defines how to verify the client certificate when an external client establishes a TLS connection to Envoy. \\n This setting: \\n 1. Enables TLS client certificate validation. 2. Specifies how the client certificate will be validated (i.e. validation required or skipped). \\n Note: Setting client certificate validation to be skipped should be only used in conjunction with an external authorization server that performs client validation as Contour will ensure client certificates are passed along."'),
        clientValidation: {
          '#forwardClientCertificate':: d.obj(help='"ForwardClientCertificate adds the selected data from the passed client TLS certificate to the x-forwarded-client-cert header."'),
          forwardClientCertificate: {
            '#withCert':: d.fn(help='"Client cert in URL encoded PEM format."', args=[d.arg(name='cert', type=d.T.boolean)]),
            withCert(cert): { spec+: { virtualhost+: { tls+: { clientValidation+: { forwardClientCertificate+: { cert: cert } } } } } },
            '#withChain':: d.fn(help='"Client cert chain (including the leaf cert) in URL encoded PEM format."', args=[d.arg(name='chain', type=d.T.boolean)]),
            withChain(chain): { spec+: { virtualhost+: { tls+: { clientValidation+: { forwardClientCertificate+: { chain: chain } } } } } },
            '#withDns':: d.fn(help='"DNS type Subject Alternative Names of the client cert."', args=[d.arg(name='dns', type=d.T.boolean)]),
            withDns(dns): { spec+: { virtualhost+: { tls+: { clientValidation+: { forwardClientCertificate+: { dns: dns } } } } } },
            '#withSubject':: d.fn(help='"Subject of the client cert."', args=[d.arg(name='subject', type=d.T.boolean)]),
            withSubject(subject): { spec+: { virtualhost+: { tls+: { clientValidation+: { forwardClientCertificate+: { subject: subject } } } } } },
            '#withUri':: d.fn(help='"URI type Subject Alternative Name of the client cert."', args=[d.arg(name='uri', type=d.T.boolean)]),
            withUri(uri): { spec+: { virtualhost+: { tls+: { clientValidation+: { forwardClientCertificate+: { uri: uri } } } } } },
          },
          '#withCaSecret':: d.fn(help='"Name of a Kubernetes secret that contains a CA certificate bundle. The secret must contain key named ca.crt. The client certificate must validate against the certificates in the bundle. If specified and SkipClientCertValidation is true, client certificates will be required on requests. The name can be optionally prefixed with namespace \\"namespace/name\\". When cross-namespace reference is used, TLSCertificateDelegation resource must exist in the namespace to grant access to the secret."', args=[d.arg(name='caSecret', type=d.T.string)]),
          withCaSecret(caSecret): { spec+: { virtualhost+: { tls+: { clientValidation+: { caSecret: caSecret } } } } },
          '#withCrlOnlyVerifyLeafCert':: d.fn(help='"If this option is set to true, only the certificate at the end of the certificate chain will be subject to validation by CRL."', args=[d.arg(name='crlOnlyVerifyLeafCert', type=d.T.boolean)]),
          withCrlOnlyVerifyLeafCert(crlOnlyVerifyLeafCert): { spec+: { virtualhost+: { tls+: { clientValidation+: { crlOnlyVerifyLeafCert: crlOnlyVerifyLeafCert } } } } },
          '#withCrlSecret':: d.fn(help='"Name of a Kubernetes opaque secret that contains a concatenated list of PEM encoded CRLs. The secret must contain key named crl.pem. This field will be used to verify that a client certificate has not been revoked. CRLs must be available from all CAs, unless crlOnlyVerifyLeafCert is true. Large CRL lists are not supported since individual secrets are limited to 1MiB in size. The name can be optionally prefixed with namespace \\"namespace/name\\". When cross-namespace reference is used, TLSCertificateDelegation resource must exist in the namespace to grant access to the secret."', args=[d.arg(name='crlSecret', type=d.T.string)]),
          withCrlSecret(crlSecret): { spec+: { virtualhost+: { tls+: { clientValidation+: { crlSecret: crlSecret } } } } },
          '#withOptionalClientCertificate':: d.fn(help='"OptionalClientCertificate when set to true will request a client certificate but allow the connection to continue if the client does not provide one. If a client certificate is sent, it will be verified according to the other properties, which includes disabling validation if SkipClientCertValidation is set. Defaults to false."', args=[d.arg(name='optionalClientCertificate', type=d.T.boolean)]),
          withOptionalClientCertificate(optionalClientCertificate): { spec+: { virtualhost+: { tls+: { clientValidation+: { optionalClientCertificate: optionalClientCertificate } } } } },
          '#withSkipClientCertValidation':: d.fn(help='"SkipClientCertValidation disables downstream client certificate validation. Defaults to false. This field is intended to be used in conjunction with external authorization in order to enable the external authorization server to validate client certificates. When this field is set to true, client certificates are requested but not verified by Envoy. If CACertificate is specified, client certificates are required on requests, but not verified. If external authorization is in use, they are presented to the external authorization server."', args=[d.arg(name='skipClientCertValidation', type=d.T.boolean)]),
          withSkipClientCertValidation(skipClientCertValidation): { spec+: { virtualhost+: { tls+: { clientValidation+: { skipClientCertValidation: skipClientCertValidation } } } } },
        },
        '#withEnableFallbackCertificate':: d.fn(help="\"EnableFallbackCertificate defines if the vhost should allow a default certificate to be applied which handles all requests which don't match the SNI defined in this vhost.\"", args=[d.arg(name='enableFallbackCertificate', type=d.T.boolean)]),
        withEnableFallbackCertificate(enableFallbackCertificate): { spec+: { virtualhost+: { tls+: { enableFallbackCertificate: enableFallbackCertificate } } } },
        '#withMaximumProtocolVersion':: d.fn(help='"MaximumProtocolVersion is the maximum TLS version this vhost should negotiate. Valid options are `1.2` and `1.3` (default). Any other value defaults to TLS 1.3."', args=[d.arg(name='maximumProtocolVersion', type=d.T.string)]),
        withMaximumProtocolVersion(maximumProtocolVersion): { spec+: { virtualhost+: { tls+: { maximumProtocolVersion: maximumProtocolVersion } } } },
        '#withMinimumProtocolVersion':: d.fn(help='"MinimumProtocolVersion is the minimum TLS version this vhost should negotiate. Valid options are `1.2` (default) and `1.3`. Any other value defaults to TLS 1.2."', args=[d.arg(name='minimumProtocolVersion', type=d.T.string)]),
        withMinimumProtocolVersion(minimumProtocolVersion): { spec+: { virtualhost+: { tls+: { minimumProtocolVersion: minimumProtocolVersion } } } },
        '#withPassthrough':: d.fn(help='"Passthrough defines whether the encrypted TLS handshake will be passed through to the backing cluster. Either Passthrough or SecretName must be specified, but not both."', args=[d.arg(name='passthrough', type=d.T.boolean)]),
        withPassthrough(passthrough): { spec+: { virtualhost+: { tls+: { passthrough: passthrough } } } },
        '#withSecretName':: d.fn(help="\"SecretName is the name of a TLS secret. Either SecretName or Passthrough must be specified, but not both. If specified, the named secret must contain a matching certificate for the virtual host's FQDN. The name can be optionally prefixed with namespace \\\"namespace/name\\\". When cross-namespace reference is used, TLSCertificateDelegation resource must exist in the namespace to grant access to the secret.\"", args=[d.arg(name='secretName', type=d.T.string)]),
        withSecretName(secretName): { spec+: { virtualhost+: { tls+: { secretName: secretName } } } },
      },
      '#withFqdn':: d.fn(help='"The fully qualified domain name of the root of the ingress tree all leaves of the DAG rooted at this object relate to the fqdn."', args=[d.arg(name='fqdn', type=d.T.string)]),
      withFqdn(fqdn): { spec+: { virtualhost+: { fqdn: fqdn } } },
      '#withIpAllowPolicy':: d.fn(help='"IPAllowFilterPolicy is a list of ipv4/6 filter rules for which matching requests should be allowed. All other requests will be denied. Only one of IPAllowFilterPolicy and IPDenyFilterPolicy can be defined. The rules defined here may be overridden in a Route."', args=[d.arg(name='ipAllowPolicy', type=d.T.array)]),
      withIpAllowPolicy(ipAllowPolicy): { spec+: { virtualhost+: { ipAllowPolicy: if std.isArray(v=ipAllowPolicy) then ipAllowPolicy else [ipAllowPolicy] } } },
      '#withIpAllowPolicyMixin':: d.fn(help='"IPAllowFilterPolicy is a list of ipv4/6 filter rules for which matching requests should be allowed. All other requests will be denied. Only one of IPAllowFilterPolicy and IPDenyFilterPolicy can be defined. The rules defined here may be overridden in a Route."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ipAllowPolicy', type=d.T.array)]),
      withIpAllowPolicyMixin(ipAllowPolicy): { spec+: { virtualhost+: { ipAllowPolicy+: if std.isArray(v=ipAllowPolicy) then ipAllowPolicy else [ipAllowPolicy] } } },
      '#withIpDenyPolicy':: d.fn(help='"IPDenyFilterPolicy is a list of ipv4/6 filter rules for which matching requests should be denied. All other requests will be allowed. Only one of IPAllowFilterPolicy and IPDenyFilterPolicy can be defined. The rules defined here may be overridden in a Route."', args=[d.arg(name='ipDenyPolicy', type=d.T.array)]),
      withIpDenyPolicy(ipDenyPolicy): { spec+: { virtualhost+: { ipDenyPolicy: if std.isArray(v=ipDenyPolicy) then ipDenyPolicy else [ipDenyPolicy] } } },
      '#withIpDenyPolicyMixin':: d.fn(help='"IPDenyFilterPolicy is a list of ipv4/6 filter rules for which matching requests should be denied. All other requests will be allowed. Only one of IPAllowFilterPolicy and IPDenyFilterPolicy can be defined. The rules defined here may be overridden in a Route."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ipDenyPolicy', type=d.T.array)]),
      withIpDenyPolicyMixin(ipDenyPolicy): { spec+: { virtualhost+: { ipDenyPolicy+: if std.isArray(v=ipDenyPolicy) then ipDenyPolicy else [ipDenyPolicy] } } },
      '#withJwtProviders':: d.fn(help='"Providers to use for verifying JSON Web Tokens (JWTs) on the virtual host."', args=[d.arg(name='jwtProviders', type=d.T.array)]),
      withJwtProviders(jwtProviders): { spec+: { virtualhost+: { jwtProviders: if std.isArray(v=jwtProviders) then jwtProviders else [jwtProviders] } } },
      '#withJwtProvidersMixin':: d.fn(help='"Providers to use for verifying JSON Web Tokens (JWTs) on the virtual host."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='jwtProviders', type=d.T.array)]),
      withJwtProvidersMixin(jwtProviders): { spec+: { virtualhost+: { jwtProviders+: if std.isArray(v=jwtProviders) then jwtProviders else [jwtProviders] } } },
    },
    '#withIncludes':: d.fn(help='"Includes allow for specific routing configuration to be included from another HTTPProxy, possibly in another namespace."', args=[d.arg(name='includes', type=d.T.array)]),
    withIncludes(includes): { spec+: { includes: if std.isArray(v=includes) then includes else [includes] } },
    '#withIncludesMixin':: d.fn(help='"Includes allow for specific routing configuration to be included from another HTTPProxy, possibly in another namespace."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='includes', type=d.T.array)]),
    withIncludesMixin(includes): { spec+: { includes+: if std.isArray(v=includes) then includes else [includes] } },
    '#withIngressClassName':: d.fn(help='"IngressClassName optionally specifies the ingress class to use for this HTTPProxy. This replaces the deprecated `kubernetes.io/ingress.class` annotation. For backwards compatibility, when that annotation is set, it is given precedence over this field."', args=[d.arg(name='ingressClassName', type=d.T.string)]),
    withIngressClassName(ingressClassName): { spec+: { ingressClassName: ingressClassName } },
    '#withRoutes':: d.fn(help='"Routes are the ingress routes. If TCPProxy is present, Routes is ignored."', args=[d.arg(name='routes', type=d.T.array)]),
    withRoutes(routes): { spec+: { routes: if std.isArray(v=routes) then routes else [routes] } },
    '#withRoutesMixin':: d.fn(help='"Routes are the ingress routes. If TCPProxy is present, Routes is ignored."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='routes', type=d.T.array)]),
    withRoutesMixin(routes): { spec+: { routes+: if std.isArray(v=routes) then routes else [routes] } },
  },
  '#mixin': 'ignore',
  mixin: self,
}
